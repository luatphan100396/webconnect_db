CREATE OR REPLACE PROCEDURE rpt_Get_Bull_Evaluation_Stats
--======================================================================================
--Author: Nghi Ta
--Created Date: 2020-06-23
--Description: get bull evaluation statistic
--Output: 
--       +Ds1: Breed, Mean trait PTA, STD DEV trait PTA 
--======================================================================================
( in @input_char varchar(10000),
  in @is_export smallint default 0,
  in @v_export_id varchar(128) )
 
 dynamic result sets  10
BEGIN
    
    DECLARE input_xml XML;
     
   DECLARE v_RUN_PDATE smallint;
   DECLARE DEFAULT_DATE char(10);
   DECLARE v_IS_SHOW_SCR smallint default 0;
   DECLARE v_IS_SHOW_FIRST_EVAL smallint default 0;
   
   DECLARE sql_breed_code varchar(300);
   DECLARE sql_query_trait_code_1 varchar(10000); 
   DECLARE sql_query_trait_code_2 varchar(10000);  
   DECLARE sql_query_trait_code_3 varchar(10000);  
   DECLARE sql_query_all_subset varchar(30000); 
   DECLARE sql_query varchar(30000); 
   DECLARE sql_query_main_from varchar(30000);
   DECLARE sql_query_count varchar(30000);
   
   DECLARE sql_AI_Bull_condition varchar(1000);
   DECLARE sql_Non_AI_Bull_condition varchar(1000);
   DECLARE sql_Born8yr_condition varchar(1000);
   DECLARE sql_First_Eval_condition varchar(1000);
   
   
   DECLARE sql_query_get_report_data varchar(30000); 
   DECLARE sql_query_get_report_data2 varchar(30000); 
   DECLARE sql_query_cut_data_seg varchar(30000);
   
   DECLARE sql_query_exp_header varchar(10000);  
   DECLARE sql_query_exp_content_1 varchar(30000);  
   DECLARE v_data clob(2M);  
   
   
   
   DECLARE BIRTH_PDATE_YOUNG_THRESHOLD smallint;
   DECLARE v_BIRTH_PDATE_8YR smallint;
   DECLARE EXPORT_PATH varchar(200);
   DECLARE EXPORT_FILE_NAME varchar(300); 
   DECLARE EXPORT_ID varchar(128);
     
   DECLARE C1 CURSOR WITH RETURN FOR D1;  
   DECLARE C2 CURSOR WITH RETURN FOR D2;  
  
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFilterInputsMultiSelect 
	(
		Field      VARCHAR(128),
		Value       VARCHAR(128),
		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.v_TmpTraitList
	(
		TRAIT  varchar(10), 
		TRAIT_CODE varchar(5),
		TRAIT_FULL_NAME varchar(50),
		UNIT varchar(30),
		DECIMAL_ADJUST_CODE varchar(5),
		TYPE varchar(30),
		ORDER  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.v_TmpBreedList
	(
		BREED_CODE  char(2) ,
		ORDER smallint
	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.v_TmpSubsetList
	(
		SUBSET_CODE  varchar(50),
		SUBSET_DESC  varchar(300),
		ORDER smallint
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
  DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpReportData 
	(
		SUBSET_DESC      VARCHAR(128)
		,ORDER       smallint 
		,BREED_NAME      VARCHAR(30)
		,BREED_CODE      VARCHAR(2)
		,NUM_ANIMAL int
		,RN smallint
	    ,MEAN_SEG varchar(30000)
	    ,STDDEV_SEG varchar(30000)
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
 
-- Retrive data	
 IF @is_export= 0 then
  
	set input_xml =  xmlparse(document @input_char);
	
	   
   INSERT INTO SESSION.TmpFilterInputsMultiSelect 
	(    
		Field,
		Value 
	)
   SELECT  
		 XML_BOOKS.Field,
		 XML_BOOKS.Value		 
		FROM  
		XMLTABLE(
		'$doc/Inputs/Multi_Item/Item' 
		PASSING input_xml AS "doc"
		COLUMNS 
		 
		Field      VARCHAR(128)  PATH 'Field',
		Value       VARCHAR(3000)  PATH 'Value' 
		) AS XML_BOOKS;    
		
   INSERT INTO SESSION.v_TmpBreedList(BREED_CODE, ORDER)
   SELECT upper(trim(VALUE)),ORDER
   FROM SESSION.TmpFilterInputsMultiSelect
   WHERE FIELD ='BREED_CODE';
   
   INSERT INTO SESSION.v_TmpSubsetList(SUBSET_CODE, SUBSET_DESC, ORDER)
   
   SELECT s.VALUE, c.SUBSET_DESC, s.ORDER
   FROM
   (SELECT trim(VALUE) as VALUE, ORDER
   FROM SESSION.TmpFilterInputsMultiSelect
   WHERE FIELD ='SUBSET'
   )s
   inner join (select * from table(fn_Get_List_Animal_Condition_Type())
               where lower(SUBSET_DESC) IN 
		        (   lower('Active AI Bulls'),
			        lower('Genomic tested young bulls being marketed'),
			        lower('AI bulls born in last 8 years'),
			        lower('Non-AI bulls born in last 8 years'),
			        lower('First-evaluation AI bulls'),
			        lower('First-evaluation non-AI bulls')
		        )
		           ) c
			on s.VALUE = c.SUBSET_CODE
   ;
   
   
   INSERT INTO SESSION.v_TmpTraitList
   (
   TRAIT,  
   TRAIT_CODE,
   TRAIT_FULL_NAME,
   UNIT,
   DECIMAL_ADJUST_CODE,
   TYPE 
   )
  
   SELECT REPLACE(REPLACE(upper(trim(t.VALUE)),'%','_PCT'),'$','_AMT') as TRAIT,
          trim(t.VALUE) as TRAIT_CODE, 
          trait.TRAIT_FULL_NAME AS TRAIT_FULL_NAME,
          trait.UNIT,
          case when trait.DECIMAL_ADJUST_CODE = '0' then '1'
               when trait.DECIMAL_ADJUST_CODE = '1' then '0.1' 
               else '1'
          end as DECIMAL_ADJUST_CODE,
          t.FIELD
          
   FROM 
   ( 
   SELECT VALUE, ORDER, FIELD
   FROM SESSION.TmpFilterInputsMultiSelect
   WHERE FIELD IN ('TRAIT','INDEX','INDEX_PA')
   )t
   LEFT JOIN 
   (
      select  TRAIT, 
		      TRAIT_FULL_NAME, 
		      UNIT, 
		      DECIMAL_ADJUST_CODE
      from table(fn_Get_List_traits())
   )trait
   on trait.TRAIT = t.VALUE
   order by t.ORDER
   ; 


   SET DEFAULT_DATE = (select STRING_VALUE FROM dbo.constants where name ='Default_Date_Value' LIMIT 1 with UR);   
   SET v_RUN_PDATE = (SELECT MAX(RUN_PDATE) FROM TABLE (fn_Get_List_Run_Date()) );
   SET v_IS_SHOW_SCR = (SELECT count(1) FROM SESSION.v_TmpTraitList where trait ='SCR' limit 1); 
   SET v_IS_SHOW_FIRST_EVAL = (SELECT count(1) FROM SESSION.v_TmpSubsetList where SUBSET_CODE like '%First_Eval%' limit 1);
   
   SET BIRTH_PDATE_YOUNG_THRESHOLD = (select days('2004-01-01')  - days(DEFAULT_DATE)  from sysibm.sysdummy1);
   SET v_BIRTH_PDATE_8YR = (SELECT  DAYS(CURRENT DATE - 8 YEARS) - DAYS(DEFAULT_DATE) from sysibm.sysdummy1);
   
   SET EXPORT_ID = (select varchar_format(current date,'YYYYMMDD') || replace(cast(current time as varchar(10)),':','') from sysibm.sysdummy1);   
  
   
   --build dynamic index columns to select
   -- Breed list
   select  substr(xmlserialize(xmlagg(xmltext( ','''||BREED_CODE||''''
										 	 ) order by  t.Order) as VARCHAR(30000)),2)
		  
		 into sql_breed_code 
   from  SESSION.v_TmpBreedList t  ;
    
    -- Trait list 
   select substr(xmlserialize(xmlagg(xmltext (  ',float2char(avg(bv.PTA_'||t.trait||'_QTY),'||DECIMAL_ADJUST_CODE||') as MEAN_'||t.trait||', float2char(stddev(bv.PTA_'||t.trait||'_QTY),'||DECIMAL_ADJUST_CODE||') as STDDEV_'||t.trait||'
       ' 
	                                             ) order by t.ORDER ) as VARCHAR(30000)),1)
	      
	     ,substr(xmlserialize(xmlagg(xmltext (  '||cast(bv.MEAN_'||t.trait||' as char(10))' 
	                                             ) order by t.ORDER ) as VARCHAR(30000)),3)
	     ,substr(xmlserialize(xmlagg(xmltext (  '||cast(bv.STDDEV_'||t.trait||' as char(10)) ' 
	                                             ) order by t.ORDER ) as VARCHAR(30000)),3)
	     ,substr(xmlserialize(xmlagg(xmltext (  ',trim(substring(MEAN_SEG,'|| cast( ((t.Order-1)*10)+1 as varchar(10))||',10)) as MEAN_'||t.trait||',trim(substring(STDDEV_SEG,'|| cast( ((t.Order-1)*10)+1 as varchar(10))||',10)) as STDDEV_'||t.trait||' 
	     ' 
	                                             ) order by t.ORDER ) as VARCHAR(30000)),1)
   into sql_query_trait_code_1, sql_query_trait_code_2, sql_query_trait_code_3, sql_query_cut_data_seg
   from SESSION.v_TmpTraitList t ;
 
    
   -- Create query     
   SET sql_query_main_from ='';
   
   SET sql_query = '
    select ''(Group)'' as Group  
          ,bv.eval_breed_code
          ,count(1) as num_animal
          '||sql_query_trait_code_1||' 
 from  
 '||case when v_IS_SHOW_SCR =1 then '
 (select * 
  from bull_evl_table_decode bv
  where bv.eval_pdate = '||v_RUN_PDATE||'
      and ((Group_Condition))
      and bv.eval_breed_code in ('||sql_breed_code||') 
 )bv 
 left join bull_fert_table bfert
	 on bv.anim_key = bfert.anim_key
	 and bv.eval_pdate = bfert.eval_pdate '      
        
         else '
 bull_evl_table_decode bv
   (First_Eval)
 where bv.eval_pdate = '||v_RUN_PDATE||'
      and ((Group_Condition))
      and bv.eval_breed_code in ('||sql_breed_code||') '
    end  
 ||'
 group by bv.eval_breed_code
   ';
   
 
  set sql_query = replace(sql_query,'PTA_FAT_PCT_QTY','PTA_FAT_PCT');
  set sql_query = replace(sql_query,'PTA_PRO_PCT_QTY','PTA_PRO_PCT');
  set sql_query = replace(sql_query,'PTA_NM_AMT_QTY','NM_AMT');
  set sql_query = replace(sql_query,'PTA_FM_AMT_QTY','FM_AMT');
  set sql_query = replace(sql_query,'PTA_CM_AMT_QTY','CM_AMT');
  set sql_query = replace(sql_query,'PTA_GM_AMT_QTY','GM_AMT');  
  set sql_query = replace(sql_query,'PTA_PA_AMT_QTY','PA_AMT');
  set sql_query = replace(sql_query,'bv.PTA_SCR_QTY','bfert.ERCR_QTY*0.1');
  
   
   
   set sql_Non_AI_Bull_condition = 'bv.status_code <>''F'' 
		        and (bv.status_code =''N'' OR (bv.birth_pdate - bv.enter_ai_pdate < 40*30.4)
			   )';
   set sql_AI_Bull_condition = 'not('||sql_Non_AI_Bull_condition||'
		  )';
   set sql_Born8yr_condition = 'bv.eval_pdate - bv.birth_pdate <= 2922';
   set sql_First_Eval_condition ='MLK_HIGH_EVAL_NUM = 1';
   
   
   -- Subset
    select substr(xmlserialize(xmlagg(xmltext ( 'union all'||replace(replace(sql_query,'(Group)',s.SUBSET_CODE),'(Group_Condition)',s.CONDITION)
	                                             )  ) as VARCHAR(30000)), 10)
	      
	into  sql_query_all_subset
	from 
	(
		select s.SUBSET_CODE,  
		       s.ORDER,
		      case  when s.SUBSET_CODE ='A' then 'bv.status_code in (''A'')'
				      when s.SUBSET_CODE ='G_young_marked' then 'bv.status_code =''G'' '
				      when s.SUBSET_CODE ='AI_last_8yr' then sql_AI_Bull_condition  ||'
	  and '|| sql_Born8yr_condition
				      when s.SUBSET_CODE ='Non_AI_last_8yr' then sql_Non_AI_Bull_condition  ||'
	  and '|| sql_Born8yr_condition
				      when s.SUBSET_CODE ='First_Eval_AI' then sql_AI_Bull_condition  ||'
	  and '|| sql_First_Eval_condition
				      when s.SUBSET_CODE ='First_Eval_Non_AI' then sql_Non_AI_Bull_condition  ||'
	  and '|| sql_First_Eval_condition
				      else ''
				        
			   end as CONDITION 
		      
		from SESSION.v_TmpSubsetList s 
	) s
	;
	
	set sql_query_all_subset = ' 
	  from
	  (
		select breed_code, breed_name 
		from breed_table
		where breed_code in ('||sql_breed_code||')
	 )breed
	 cross join 
	 (
	     select subset_code, subset_desc, order
	     from SESSION.v_TmpSubsetList
	 )group
	 left join
	  (
	    '||sql_query_all_subset||'
	  )bv
	  on breed.breed_code = bv.eval_breed_code
	  and group.subset_code = bv.group
   
	';
	set sql_query_all_subset = replace(replace(sql_query_all_subset,'&gt;','>'),'&lt;','<'); 
	

    
      set sql_query_all_subset = '
   INSERT INTO SESSION.TmpReportData
	(   SUBSET_DESC,
		ORDER,
		BREED_NAME,
		BREED_CODE,
		NUM_ANIMAL,
		RN,
		MEAN_SEG, 
		STDDEV_SEG
	) 
   select  
          group.subset_desc
	      ,group.order
	      ,breed.breed_name 
	      ,breed.breed_code
	      ,bv.num_animal
	      ,row_number()over(partition by group.order order by breed.breed_code) as RN
	      ,'||sql_query_trait_code_2||'
	      ,'||sql_query_trait_code_3||' 
	  '||sql_query_all_subset||'
   order by group.order, breed.breed_code
	';
	
	 
 set sql_query_get_report_data ='
 select  SUBSET_DESC
        ,ORDER
		,BREED_NAME
		,BREED_CODE
		,NUM_ANIMAL 
		,RN
        '||sql_query_cut_data_seg||' 
 from SESSION.TmpReportData with UR
 ';
 
 -- PREPARE DATA FOR EXPORT
     -- Build header 
     select  CenterAlign('Breed',30)
           ||RightAlign('Bulls (No.)',12)  
           ||substr(xmlserialize(xmlagg(xmltext (  CenterAlign(TRAIT_CODE,17)
	                                             )  ) as VARCHAR(20000)),1)
   into sql_query_exp_header
   from SESSION.v_TmpTraitList t ; 
   
   set sql_query_exp_header =  
repeat('-',length(sql_query_exp_header))
||' 
'||sql_query_exp_header
||' 
'||(
select  cast('' as char(30))
           ||cast('' as char(12))
           ||substr(xmlserialize(xmlagg(xmltext ( RightAlign('Mean',7)||cast('' as char(3))||RightAlign('StdDev',7)
	                                             )  ) as VARCHAR(20000)),1)
  
   from SESSION.v_TmpTraitList t
)
||' 
'||repeat('-',length(sql_query_exp_header))
||'
' 
;
  
   
   select 'LeftAlignWithChar(bv.breed_name,27,''.'') || RightAlign(bv.num_animal,12) '||substr(xmlserialize(xmlagg(xmltext (  '||   RightAlign(MEAN_'||trait||',7)  || cast('''' as char(3)) || RightAlign(STDDEV_'||trait||',7)  '
	                                             )  ) as VARCHAR(20000)),1)
   into sql_query_exp_content_1
   from SESSION.v_TmpTraitList t ;
   
   
set sql_query_get_report_data2 = '
 
      insert into EXPORT_DATA_HISTORICAL(ExportID, Data)
  	  select '''||EXPORT_ID||''', '''||sql_query_exp_header||''' || 
  	  replace(substr(xmlserialize(xmlagg(xmltext ( 
  	  case when RN =1 then ''
''||bv.subset_desc ||'':'' 
 ||''
''   else '''' end 
  	  
|| cast('''' as char(3)) ||
  	  
  	  '||sql_query_exp_content_1||'
	 
	 ||''
''
	                                            ) order by bv.order, bv.breed_code) as VARCHAR(30000)),1)
	  ,''&#xD;'','''')
	  
	  from ( 
	         
	         '||sql_query_get_report_data||'  
            )bv
	  
	'; 
	 

  
  	 EXECUTE IMMEDIATE sql_query_all_subset;
	 EXECUTE IMMEDIATE sql_query_get_report_data2;	
	 
     PREPARE D1 FROM  sql_query_get_report_data;
     OPEN C1;
    
    
     begin
  		        declare cir cursor with return for
  		        select EXPORT_ID  from sysibm.sysdummy1;
  		        open cir;
  	  end;
  	     
  	     
  ELSE 
	--@is_export
	
	 
	  set v_data = ( select Data from EXPORT_DATA_HISTORICAL where ExportID = @v_export_id);
	    
      set EXPORT_PATH = (select string_value from dbo.constants where name ='Export_Folder');
		 
	  set EXPORT_FILE_NAME =   'BullEvalStats_'  ||(select varchar_format(current date,'YYYYMMDD') || replace(cast(current time as varchar(10)),':','') from sysibm.sysdummy1); 
	  set EXPORT_FILE_NAME =  EXPORT_PATH||'/'||EXPORT_FILE_NAME||'.txt';
        
      call usp_common_export_long_text(v_data, EXPORT_FILE_NAME);
       
          -- Retrieve data 
      
        begin
  		        declare cir cursor with return for
  		        select EXPORT_FILE_NAME  from sysibm.sysdummy1;
  		        open cir;
  	     end;
  	       
   END IF;
END