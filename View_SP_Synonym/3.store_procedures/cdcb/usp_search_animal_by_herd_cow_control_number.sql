CREATE OR REPLACE PROCEDURE usp_Search_Animal_By_Herd_Cow_Control_Number
--=================================================================================================
--Author: Linh Pham
--Created Date: 2020-01-25
--Description: Get list INT_ID from string input
--Output:
--        +Ds1: Table with animal id, animal key, species code, sex code, herd code, ctrl num, has error, 
--              is linked to animal 
--        +Ds2: Invalid item 
--=================================================================================================
(
	IN @SEARCH_FOR VARCHAR(10) -- GOAT/CATTLE
	,IN @INPUT_VALUE VARCHAR(10000) 
	,@DELIMITER VARCHAR(1) default ',' 
	,IN @IS_DATA_EXCHANGE char(1)
	,IN @REQUEST_KEY BIGINT
	,IN @OPERATION_KEY BIGINT
)
	DYNAMIC RESULT SETS 3
	LANGUAGE SQL
BEGIN
	DECLARE EXPORT_FILE_NAME VARCHAR(300);
	DECLARE TEMPLATE_NAME VARCHAR(200) ; 
	DECLARE LAST_ROW_ID INT;
	
	DECLARE SQLCODE INTEGER DEFAULT 0; 
    DECLARE retcode_Operation INTEGER DEFAULT 0;
    DECLARE err_message varchar(300);
    
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputs
	(	
		INPUT_VALUE VARCHAR(128),
		ROW_KEY INT GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)
	
	)WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	 
    DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_RESULT   
	(
		ANIM_KEY INT,
		INT_ID CHAR(17), 
		SEX_CODE char(1),
		SPECIES_CODE char(1),
		HERD_CODE int,
		CTRL_NUM int,
		ROW_ID 	INT GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1),
		INPUT_VALUE   varchar(10000)
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
  
	   DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputValid 
	(
		INPUT_VALUE varchar(128) 
	)  WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	
	INSERT INTO SESSION.TmpInputs(INPUT_VALUE)
	SELECT  ITEM FROM table(fn_Split_String (@INPUT_VALUE,@DELIMITER));
	
	IF @IS_DATA_EXCHANGE ='0' THEN
		 
	
			INSERT INTO SESSION.TmpInputs(INPUT_VALUE)
			SELECT  ITEM FROM table(fn_Split_String (@INPUT_VALUE,@DELIMITER));
			
			-- Remove duplicate input
			MERGE INTO SESSION.TmpInputs as A
			 using
			 (
		  
				 SELECT INPUT_VALUE, MIN(ROW_KEY) AS ROW_KEY
				 FROM SESSION.TmpInputs t	
				 GROUP BY INPUT_VALUE
				 with UR
			 )AS B
			 ON  A.INPUT_VALUE = B.INPUT_VALUE and A.ROW_KEY <> B.ROW_KEY 
			 WHEN MATCHED THEN
			 DELETE
			 ;
			  
   ELSEIF @IS_DATA_EXCHANGE ='1' THEN
	
		INSERT INTO SESSION.TmpInputs
		(  
		   INPUT_VALUE,
		   ROW_KEY
	   )
	    select  t.LINE,
	            t.ROW_KEY
		   from DATA_EXCHANGE_INPUT_TABLE  t
		   where REQUEST_KEY = @REQUEST_KEY
		   order by ROW_KEY
	   ; 
	  
   END IF;
	  
		INSERT INTO SESSION.TMP_RESULT
		(
			ANIM_KEY,
			INT_ID, 
			SEX_CODE,
			SPECIES_CODE, 
			HERD_CODE,
			CTRL_NUM, 
			INPUT_VALUE
		)
		  
		 SELECT 
		 a.ANIM_KEY, 
		 a.INT_ID,  
		 a.SEX_CODE,
		 a.SPECIES_CODE, 
		 a.HERD_CODE,
		 a.CTRL_NUM, 
		 t.INPUT_VALUE
		 FROM  SESSION.TmpInputs t
		 JOIN ANIM_KEY_HERD_CTRL_NUM a 
		     on upper(t.INPUT_VALUE) =  a.HERD_CODE ||' '|| a.CTRL_NUM
		     --and length(replace(trim(a.INT_ID),' ',''))=17
		 
		  WHERE  ( (@SEARCH_FOR='CATTLE' AND a.SPECIES_CODE ='0')
		        OR (@SEARCH_FOR='GOAT' AND a.SPECIES_CODE ='1')
			 )
		ORDER BY ROW_KEY
		 with UR; 
		 
		 
		 INSERT INTO SESSION.TmpInputValid 
		 (
		 INPUT_VALUE
		 )
		 SELECT a.HERD_CODE ||' '|| a.CTRL_NUM as INPUT_VALUE
		 FROM SESSION.TMP_RESULT a with UR;
		 
	  IF @IS_DATA_EXCHANGE ='0' THEN 
		-- DS1: output list
	     	begin
			 	DECLARE cursor0 CURSOR WITH RETURN for
		 		
		 	SELECT  
			a.INT_ID AS ANIMAL_ID,
		 	a.ANIM_KEY,
		 	a.SPECIES_CODE,
		 	a.SEX_CODE,
		 	a.HERD_CODE,
		 	a.CTRL_NUM,
		 	a.HERD_CODE||' '|| a.CTRL_NUM as HERD_CTRL_NUM,
			case when  aHasErr.INT_ID is not null then '1'
		      else '0' 
		    end as HAS_ERROR,
			case when  a.ANIM_KEY is not null then '1'
			      else '0' 
			end as IS_LINK_TO_ANIMAL, 
			a.ROW_ID
		 	FROM  SESSION.TMP_RESULT a
		 	LEFT JOIN ANIM_KEY_HAS_ERROR aHasErr 
		     on aHasErr.INT_ID = a.INT_ID 
		     and aHasErr.SPECIES_CODE = a.SPECIES_CODE 
			ORDER BY a.ROW_ID, a.INT_ID
			 with UR;
		  
		 	OPEN cursor0;
		 	 
	   end; 
	   
	  	-- DS2: invalid list
     	begin
		 	DECLARE cursor1_1 CURSOR WITH RETURN for
		 		
		 	SELECT DISTINCT i.INPUT_VALUE
		 	FROM SESSION.TmpInputs i
		 	LEFT JOIN SESSION.TmpInputValid valid
		 	ON i.INPUT_VALUE = valid.INPUT_VALUE
		 	WHERE valid.INPUT_VALUE IS NULL
		 	AND i.INPUT_VALUE <> '' with UR;
		 	OPEN cursor1_1;
		 	 
	   end;
		   
		    --- Data exchange
	   --- Data exchange
	  ELSEIF @IS_DATA_EXCHANGE ='1' THEN
	
		   SET LAST_ROW_ID = (SELECT MAX(ROW_ID) FROM SESSION.TMP_RESULT); 
           SET TEMPLATE_NAME 	='GET ANIMAL BY HERD COW CONTROL NUMBER';  
	       
	       begin
			     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			     SET retcode_Operation = SQLCODE;
			        
		         call usp_common_export_json_by_template('SESSION.TMP_RESULT',TEMPLATE_NAME,LAST_ROW_ID,EXPORT_FILE_NAME);
		     
		     end;
		     
		     
	       --validate output
	       IF  EXPORT_FILE_NAME IS NULL THEN 
	 	     SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'Export failed'; 
	END IF;
		   
		   UPDATE DATA_EXCHANGE_OPERATION_TABLE SET OUTPUT_PATH = EXPORT_FILE_NAME 
		   WHERE OPERATION_KEY = @OPERATION_KEY;
		   
	       
	       begin
	        declare c1 cursor with return for
	          	select EXPORT_FILE_NAME from sysibm.sysdummy1;
       
              	open c1;
    
            end;
   END IF;
    
END