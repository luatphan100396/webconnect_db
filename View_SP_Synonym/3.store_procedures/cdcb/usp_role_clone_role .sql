CREATE OR REPLACE PROCEDURE usp_Role_Clone_Role 
--================================================================================
--Author: Tuyen Nguyen
--Created Date: 2021-01-05
--Description: Clone Role  
--Output: 
--       +Ds1: 1 if success. Failed will raise exception
--=================================================================================
(
   @v_ROLE_SHORT_NAME VARCHAR(10)
)
	DYNAMIC RESULT SETS 1
	

P1: BEGIN
	-- Declare cursor
	
	

	    DECLARE v_ROLE_KEY int;
	    DECLARE v_NEW_ROLE_SHORT_NAME VARCHAR(10);
	    DECLARE v_ROLE_NAME VARCHAR(100); 
	    DECLARE v_STATUS_CODE VARCHAR(1);
	    
	    DECLARE SQLCODE INTEGER DEFAULT 0; 
	    DECLARE retcode INTEGER DEFAULT 0;
	    DECLARE err_message varchar(300);
	    
	    
	
	 -- INPUT VALIDATION
		IF  @v_ROLE_SHORT_NAME IS NULL 
		THEN
		 
	 	 SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'Input is not valid';
		
		END IF;
		
		SET v_NEW_ROLE_SHORT_NAME=(SELECT ROLE_SHORT_NAME||' Copy' FROM ROLE_TABLE WHERE LOWER(ROLE_SHORT_NAME)=LOWER(@v_ROLE_SHORT_NAME));
		
		IF (select count(1) from ROLE_TABLE where LOWER(ROLE_SHORT_NAME) =LOWER(v_NEW_ROLE_SHORT_NAME))>=1  
		THEN
		
	 	SET ERR_MESSAGE = 'Role "'|| @v_ROLE_SHORT_NAME|| '" copy has already existed';
		SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = ERR_MESSAGE;
		
		END IF;
		
		IF (select count(1) from ROLE_TABLE where LOWER(ROLE_SHORT_NAME) =LOWER(@v_ROLE_SHORT_NAME))=0  
		THEN
		
	 	SET ERR_MESSAGE = 'Role "'|| @v_ROLE_SHORT_NAME|| '" no existed';
		SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = ERR_MESSAGE;
		
		END IF;
--		SET v_ROLE_KEY = (select ROLE_KEY from ROLE_TABLE WHERE lower(ROLE_SHORT_NAME) = lower(@v_ROLE_SHORT_NAME) limit 1);
		
		SET v_ROLE_NAME = (SELECT ROLE_NAME||' Copy' FROM ROLE_TABLE WHERE LOWER(ROLE_SHORT_NAME) = LOWER(@v_ROLE_SHORT_NAME) );
		SET v_STATUS_CODE = (SELECT STATUS_CODE FROM ROLE_TABLE WHERE LOWER(ROLE_SHORT_NAME) = LOWER(@v_ROLE_SHORT_NAME));
BEGIN	
		
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
		SET retcode = SQLCODE;
		
		
		INSERT INTO ROLE_TABLE
	     ( 
			ROLE_SHORT_NAME,
			ROLE_NAME,
			STATUS_CODE
	     )
	     VALUES
	     (
	        v_NEW_ROLE_SHORT_NAME,
			v_ROLE_NAME,
			v_STATUS_CODE
		 );
				
		  
		  SET v_ROLE_KEY = (SELECT ROLE_KEY
	                      FROM ROLE_TABLE
					      WHERE LOWER(ROLE_SHORT_NAME) = LOWER(v_NEW_ROLE_SHORT_NAME) );
		  
		  
		  INSERT INTO ROLE_FEATURE_COMPONENT_TABLE
	      ( 
			ROLE_KEY,
			COMPONENT_KEY,
			CREATED_TIME,
			MODIFIED_TIME, 
			MODIFIED_BY
	     )
	     SELECT v_ROLE_KEY,
				COMPONENT_KEY,
				current timestamp as CREATED_TIME,
				current timestamp as MODIFIED_TIME,
				MODIFIED_BY
		  FROM  ROLE_FEATURE_COMPONENT_TABLE
		  WHERE ROLE_KEY = v_ROLE_KEY;
--		
	END;
    IF RETCODE < 0 THEN
			ROLLBACK;
			
			SET ERR_MESSAGE = (SELECT SYSPROC.SQLERRM (CAST(RETCODE AS VARCHAR(20))) FROM SYSIBM.SYSDUMMY1);
			SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = ERR_MESSAGE;
		ELSE
			COMMIT;
			BEGIN
				DECLARE CURSOR1 CURSOR WITH RETURN FOR
				SELECT 1 AS RESULT
				FROM SYSIBM.SYSDUMMY1;
				
				OPEN CURSOR1;
			END;
		END IF;
	
	
END P1 