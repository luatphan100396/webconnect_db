CREATE OR REPLACE PROCEDURE rpt_Comparision_Bull_Evaluation
--======================================================================================
--Author: Nghi Ta
--Created Date: 2020-06-09
--Description: Does a comparison between previous run’s active AI/young genomic  bulls and current run’s PTAs
--Output: 
--       +Ds1: data includ: birth year, number of cow, bv, rel, sire bv
--======================================================================================
( in @input_char varchar(10000))
 
 dynamic result sets  10
BEGIN
    
    DECLARE input_xml XML;
      
   DECLARE v_CUR_EVAL_PDATE SMALLINT;
   DECLARE v_PRE_EVAL_PDATE SMALLINT;
   DECLARE v_STATUS_CODE CHAR(1);
   DECLARE v_IS_SHOW_SCR smallint default 0; 
   DECLARE v_IS_SHOW_HERD smallint default 0; 
   DECLARE v_IS_SHOW_DAUS smallint default 0; 
   DECLARE DEFAULT_DATE VARCHAR(10);
   DECLARE v_mlk_dau_condition varchar(30);
    
   DECLARE sql_breed_code varchar(300);
   DECLARE sql_trait_code_1 varchar(10000);
   DECLARE sql_trait_code_2 varchar(10000);
   DECLARE sql_trait_code_3 varchar(10000);
   DECLARE sql_trait_code_4 varchar(10000);
   DECLARE sql_query varchar(30000);
   DECLARE sql_query2 varchar(30000);
   
   DECLARE C1 CURSOR WITH RETURN FOR D1;
   DECLARE C2 CURSOR WITH RETURN FOR D2; 

    DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFilterInputs 
	(
		Field      VARCHAR(50),
		Value       VARCHAR(50)
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFilterInputsMultiSelect 
	(
		Field      VARCHAR(128),
		Value       VARCHAR(128),
		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.v_TmpTraitList
	(
		TRAIT  varchar(10),
		COMPARISON_THRESHOLD varchar(10),
		ORDER smallint
	) WITH REPLACE ON COMMIT PRESERVE ROWS;

    DECLARE GLOBAL TEMPORARY TABLE SESSION.v_TmpBreedList
	(
		BREED_CODE  char(2) ,
		ORDER smallint
	) WITH REPLACE ON COMMIT PRESERVE ROWS; 

	SET input_xml =  xmlparse(document @input_char);
	 
	 
	INSERT INTO SESSION.TmpFilterInputs 
	(    
		Field,
		Value
	)
	 SELECT  
		 XML_BOOKS.Field,
		 XML_BOOKS.Value		 
		FROM  
		XMLTABLE(
		'$doc/Inputs/Item' 
		PASSING input_xml AS "doc"
		COLUMNS 
		 
		Field      VARCHAR(128)  PATH 'Field',
		Value       VARCHAR(3000)  PATH 'Value' 
		) AS XML_BOOKS;     
		 
		 
   INSERT INTO SESSION.TmpFilterInputsMultiSelect 
	(    
		Field,
		Value 
	)
   SELECT  
		 XML_BOOKS.Field,
		 XML_BOOKS.Value		 
		FROM  
		XMLTABLE(
		'$doc/Inputs/Multi_Item/Item' 
		PASSING input_xml AS "doc"
		COLUMNS 
		 
		Field      VARCHAR(128)  PATH 'Field',
		Value       VARCHAR(3000)  PATH 'Value' 
		) AS XML_BOOKS;  
		
   INSERT INTO SESSION.v_TmpTraitList
   (
   TRAIT, 
   COMPARISON_THRESHOLD, 
   ORDER
   )
  
   SELECT REPLACE(REPLACE(upper(trim(t.VALUE)),'%','_PCT'),'$','_AMT') as TRAIT,
          COALESCE(trait.COMPARISON_THRESHOLD, idx.COMPARISON_THRESHOLD) AS COMPARISON_THRESHOLD,
          ORDER
   FROM 
   ( 
   SELECT VALUE, ORDER
   FROM SESSION.TmpFilterInputsMultiSelect
   WHERE FIELD IN ('TRAIT','INDEX')
   )t
   LEFT JOIN TRAIT_TABLE trait 
        ON trait.TRAIT_SHORT_NAME = t.VALUE
   LEFT JOIN INDEX_TABLE idx 
        ON idx.INDEX_SHORT_NAME = t.VALUE
   
   ;
    
   UPDATE SESSION.v_TmpTraitList SET COMPARISON_THRESHOLD = (select string_value from dbo.constants where name = 'COMPARISON_THRESHOLD_SCR')
   WHERE TRAIT ='SCR';
   UPDATE SESSION.v_TmpTraitList SET COMPARISON_THRESHOLD = (select string_value from dbo.constants where name = 'COMPARISON_THRESHOLD_REL')
   WHERE TRAIT ='REL';
   UPDATE SESSION.v_TmpTraitList SET COMPARISON_THRESHOLD = (select string_value from dbo.constants where name = 'COMPARISON_THRESHOLD_HERDS')
   WHERE TRAIT ='HERDS';
   UPDATE SESSION.v_TmpTraitList SET COMPARISON_THRESHOLD = (select string_value from dbo.constants where name = 'COMPARISON_THRESHOLD_DAUS')
   WHERE TRAIT ='DAUS';
   
   INSERT INTO SESSION.v_TmpBreedList(BREED_CODE, ORDER)
   SELECT upper(trim(VALUE)),ORDER
   FROM SESSION.TmpFilterInputsMultiSelect
   WHERE FIELD ='BREED_CODE';
    
   -- Get comparison threshold
   
       
   
   SET v_CUR_EVAL_PDATE = (SELECT VALUE FROM SESSION.TmpFilterInputs WHERE FIELD ='CUR_RUN_PDATE' limit 1);
   SET v_PRE_EVAL_PDATE = (SELECT VALUE FROM SESSION.TmpFilterInputs WHERE FIELD ='PRE_RUN_PDATE' limit 1);
   SET v_STATUS_CODE = (SELECT VALUE FROM SESSION.TmpFilterInputs WHERE FIELD ='SUBSET' limit 1);
   SET v_IS_SHOW_SCR = (SELECT count(1) FROM SESSION.v_TmpTraitList where trait ='SCR' limit 1);
   SET v_IS_SHOW_HERD = (SELECT count(1) FROM SESSION.v_TmpTraitList where trait ='HERDS' limit 1);
   SET v_IS_SHOW_DAUS = (SELECT count(1) FROM SESSION.v_TmpTraitList where trait ='DAUS' limit 1);
   
   
   -- set milk daughter condition
   
   set v_mlk_dau_condition = case when v_STATUS_CODE ='A' then '>=10'
                                  when v_STATUS_CODE ='G' then '<10'
                              end;
   -- set dynamic breed list
   select  substr(xmlserialize(xmlagg(xmltext( ','''||BREED_CODE||''''
										 	 ) order by  t.Order) as VARCHAR(30000)),2)
		  
		 into sql_breed_code 
   from  SESSION.v_TmpBreedList t  ;
   
   -- set dynamic trait list
   select  
		substr(xmlserialize(xmlagg(xmltext( ',float2char(prev.MEAN_PTA_'||trait ||',0.1) AS PRE_MEAN_PTA_'||trait ||'
	   ,float2char(cur.MEAN_PTA_'||trait ||',0.1) AS CUR_MEAN_PTA_'||trait ||'
	   ,float2char(cur.MEAN_PTA_'||trait ||' - prev.MEAN_PTA_'||trait ||',0.1) as CHANGE_MEAN_PTA_'||trait ||'
	   '
										 	 ) order by  t.Order) as VARCHAR(30000)),1)
	     ,substr(xmlserialize(xmlagg(xmltext(',avg(bv.PTA_'|| trait ||'_QTY) AS MEAN_PTA_'||trait ||'
		'  ) order by  t.Order) as VARCHAR(30000)),1)
										 	 
		,substr(xmlserialize(xmlagg(xmltext( ',sum(case when ChangeStatus_'||trait||' ='''||trait||'_D'' then 1 else 0 end) as '||trait||'_D
         ,sum(case when ChangeStatus_'||trait||' ='''||trait||'_I'' then 1 else 0 end) as '||trait||'_I
         ,sum(case when ChangeStatus_'||trait||' ='''||trait||'_E'' then 1 else 0 end) as '||trait||'_E 
		'
										 	 ) order by  t.Order) as VARCHAR(30000)),1)		
										 	 						 	 
		 ,substr(xmlserialize(xmlagg(xmltext( ',case when  abs(cur.PTA_'||trait||'_QTY - pre.PTA_'||trait||'_QTY) >'||COMPARISON_THRESHOLD||' and (cur.PTA_'||trait||'_QTY - pre.PTA_'||trait||'_QTY) < 0 then '''||trait||'_D''
				 when  abs(cur.PTA_'||trait||'_QTY - pre.PTA_'||trait||'_QTY) >'||COMPARISON_THRESHOLD||' and (cur.PTA_'||trait||'_QTY - pre.PTA_'||trait||'_QTY) > 0 then '''||trait||'_I''
				 when  abs(cur.PTA_'||trait||'_QTY - pre.PTA_'||trait||'_QTY) <='||COMPARISON_THRESHOLD||'  then '''||trait||'_E''
	         end as ChangeStatus_'||trait||'
		'
										 	 ) order by  t.Order) as VARCHAR(30000)),1)			 
		 into  sql_trait_code_1, sql_trait_code_2, sql_trait_code_3, sql_trait_code_4
   from  SESSION.v_TmpTraitList t ; 
     
      
      
     
  SET sql_query ='
select breed.breed_name
	   ,prev.NUM_BULL
	  '||sql_trait_code_1||'
from
(
select breed_code, breed_name 
from breed_table
where breed_code in ('||sql_breed_code||')
)breed
left join
(
 select bv.eval_breed_code
        ,count(1) as NUM_BULL
        '||sql_trait_code_2||'
        
 from bull_evl_table_decode bv 
'|| case when v_STATUS_CODE ='G' then '
inner join bull_evl_table_decode bvcur 
 on bv.anim_key = bvcur.anim_key
 and bvcur.eval_pdate = '||v_CUR_EVAL_PDATE||'
'
          else ''
      end 
 ||'
 
 
 '||
 case when v_IS_SHOW_SCR =1 then 'left join bull_fert_table bfert
								  on bv.anim_key = bfert.anim_key
								  and bv.eval_pdate = bfert.eval_pdate '
	  else ''
 end
 ||'
  
 where bv.eval_pdate = '||v_PRE_EVAL_PDATE||'
 and bv.eval_breed_code in ('||sql_breed_code||')
 and bv.status_code ='''||v_STATUS_CODE||''' 
 and coalesce(bv.MLK_DAUS_QTY,0) '||v_mlk_dau_condition||'
 group by bv.eval_breed_code
)prev
on breed.breed_code = prev.eval_breed_code
left join
(
 select bv.eval_breed_code
        '||sql_trait_code_2||'
 from bull_evl_table_decode bv
 '||
 case when v_IS_SHOW_SCR =1 then 
 'left join bull_fert_table bfert
  on bv.anim_key = bfert.anim_key
  and bv.eval_pdate = bfert.eval_pdate '
	  else ''
 end
 ||'
  
 where bv.eval_pdate = '||v_CUR_EVAL_PDATE||'
 and bv.eval_breed_code in ('||sql_breed_code||')
 '|| case when v_STATUS_CODE ='G' then ''
          else '
 and coalesce(bv.MLK_DAUS_QTY,0) '||v_mlk_dau_condition 
      end 
 ||'
 group by bv.eval_breed_code
)cur
on prev.eval_breed_code = cur.eval_breed_code
order by prev.eval_breed_code
 
'; 


  
  
set sql_query2 ='select breed.breed_name, 
         change_status.*
  from
  (select breed_code,breed_name
	from breed_table
	where breed_code  in ('||sql_breed_code||')
  )breed
  left join
  (
  select eval_breed_code
         '||sql_trait_code_3||'
         
  from
  (
	  select pre.eval_breed_code
	         ,pre.anim_key
	        '||sql_trait_code_4||'
	        
	 from bull_evl_table_decode pre
	 inner join bull_evl_table_decode cur
	 on pre.anim_key = cur.anim_key
	 and pre.eval_pdate ='||v_PRE_EVAL_PDATE||'
	 and  cur.eval_pdate = '||v_CUR_EVAL_PDATE||'
	 and pre.eval_breed_code  in ('||sql_breed_code||')
	 and pre.status_code ='''||v_STATUS_CODE||''' 
	 and coalesce(pre.MLK_DAUS_QTY,0) '||v_mlk_dau_condition||' 
	  '||
	 case when v_IS_SHOW_SCR =1 then 
	 'left join bull_fert_table bfert_pre
	  on bfert_pre.anim_key = pre.anim_key
	  and bfert_pre.eval_pdate = pre.eval_pdate 
	  left join bull_fert_table bfert_cur
	  on bfert_cur.anim_key = cur.anim_key
	  and bfert_cur.eval_pdate = cur.eval_pdate '
		  else ''
	 end
	 ||'
	  
	  )change_status
	  group by eval_breed_code
 )change_status
 on breed.breed_code = change_status.eval_breed_code
 order by breed.breed_code

';
   
  set sql_query = replace(replace(sql_query,'&gt;','>'),'&lt;','<');  
  set sql_query = replace(sql_query,'PTA_FAT_PCT_QTY','PTA_FAT_PCT');
  set sql_query = replace(sql_query,'PTA_PRO_PCT_QTY','PTA_PRO_PCT');
  set sql_query = replace(sql_query,'PTA_NM_AMT_QTY','NM_AMT');
  set sql_query = replace(sql_query,'PTA_FM_AMT_QTY','FM_AMT');
  set sql_query = replace(sql_query,'PTA_CM_AMT_QTY','CM_AMT');
  set sql_query = replace(sql_query,'PTA_GM_AMT_QTY','GM_AMT'); 
  set sql_query = replace(sql_query,'PTA_REL_QTY','YLD_REL_PCT'); 
  set sql_query = replace(sql_query,'bv.PTA_SCR_QTY','bfert.ERCR_QTY*0.1'); 
  set sql_query = replace(sql_query,'PTA_REL_QTY','YLD_REL_PCT'); 
  set sql_query = replace(sql_query,'PTA_DAUS_QTY','MLK_DAUS_QTY'); 
  set sql_query = replace(sql_query,'PTA_HERDS_QTY','MLK_HERDS_QTY');  
  
  
  
  set sql_query2 = replace(replace(sql_query2,'&gt;','>'),'&lt;','<'); 
  set sql_query2 = replace(sql_query2,'PTA_FAT_PCT_QTY','PTA_FAT_PCT');
  set sql_query2 = replace(sql_query2,'PTA_PRO_PCT_QTY','PTA_PRO_PCT');
  set sql_query2 = replace(sql_query2,'PTA_NM_AMT_QTY','NM_AMT');
  set sql_query2 = replace(sql_query2,'PTA_FM_AMT_QTY','FM_AMT');
  set sql_query2 = replace(sql_query2,'PTA_CM_AMT_QTY','CM_AMT');
  set sql_query2 = replace(sql_query2,'PTA_GM_AMT_QTY','GM_AMT'); 
  set sql_query2 = replace(sql_query2,'PTA_REL_QTY','YLD_REL_PCT'); 
  set sql_query2 = replace(sql_query2,'cur.PTA_SCR_QTY','bfert_cur.ERCR_QTY*0.1'); 
  set sql_query2 = replace(sql_query2,'pre.PTA_SCR_QTY','bfert_pre.ERCR_QTY*0.1'); 
   
  set sql_query2 = replace(sql_query2,'PTA_DAUS_QTY','MLK_DAUS_QTY');  
  set sql_query2 = replace(sql_query2,'PTA_HERDS_QTY','MLK_HERDS_QTY');   
  
  -- Get Comparison of current and previous evaluations
   PREPARE D1 FROM  sql_query;
    OPEN C1;
   
  --  Get changes in evaluations
    PREPARE D2 FROM  sql_query2;
    OPEN C2;
	
--	BEGIN
--		DECLARE cursor1  CURSOR WITH RETURN for
--	    SELECT  sql_query,sql_query2 from sysibm.sysdummy1; 
--		OPEN cursor1; 
--	END;
    
   
END