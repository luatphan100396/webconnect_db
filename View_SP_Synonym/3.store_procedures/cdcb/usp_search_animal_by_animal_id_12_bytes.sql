CREATE OR REPLACE PROCEDURE usp_Search_Animal_By_Animal_ID_12_Bytes 
--=================================================================================================
--Author: Linh Pham
--Created Date: 2020-01-14
--Description: Get list ANIM_ID_NUM from string input
--Output:
--        +Ds1: Table with ANIM_ID_NUM,animal id, animal key, species code, sex code, has error, 
--              is linked, order to animal 
--        +Ds2: Animal which has no information returned 
--=================================================================================================
(
	IN @SEARCH_FOR VARCHAR(10) -- GOAT/CATTLE
	,IN @INPUT_VALUE VARCHAR(10000) 
	,@DELIMITER VARCHAR(1) default ','
)
	DYNAMIC RESULT SETS 3
	LANGUAGE SQL
BEGIN
	    
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputs
	(	
		INPUT_VALUE VARCHAR(128),
		ORDER INT  GENERATED BY DEFAULT AS IDENTITY 
      	(START WITH 1 INCREMENT BY 1)
	
	)WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpIntIDChar12Lists   
	(
		ANIM_KEY INT,
		INT_ID CHAR(17), 
		SEX_CODE char(1),
		SPECIES_CODE char(1), 
		ANIM_ID_NUM char(12),
		ORDER INT
	) WITH REPLACE  ON COMMIT PRESERVE ROWS;
  
     
	   DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputValid 
	(
		INPUT_VALUE varchar(128) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	
	INSERT INTO SESSION.TmpInputs(INPUT_VALUE)
	SELECT  ITEM FROM table(fn_Split_String (@INPUT_VALUE,@DELIMITER));
	
	-- Remove duplicate input
	MERGE INTO SESSION.TmpInputs as A
	 using
	 (
  
		 SELECT INPUT_VALUE, MIN(ORDER) AS MIN_ORDER
		 FROM SESSION.TmpInputs t	
		 GROUP BY INPUT_VALUE
		 with UR
	 )AS B
	 ON  A.INPUT_VALUE = B.INPUT_VALUE and A.ORDER <> B.MIN_ORDER 
	 WHEN MATCHED THEN
	 DELETE;
	  
	     -- Find matching animal id in id_xref_table
		INSERT INTO SESSION.TmpIntIDChar12Lists
		(
			
			ANIM_KEY,
			INT_ID, 
			SEX_CODE,
			SPECIES_CODE, 
			ANIM_ID_NUM, 
			ORDER
		)
		  
		 SELECT  
				a.ANIM_KEY, 
				a.INT_ID,  
				a.SEX_CODE,
				a.SPECIES_CODE,
				t.INPUT_VALUE,
				t.ORDER
		 FROM
		 (
		   select * 
		   from SESSION.TmpInputs t
		   where length(t.INPUT_VALUE)<=12
		 )t  
		 JOIN ID_XREF_TABLE a 
			 ON right(repeat('0',12)||upper(t.INPUT_VALUE),12) = a.ANIM_ID_NUM
	 	 WHERE (
		 	     (@SEARCH_FOR='CATTLE' AND a.SPECIES_CODE ='0')
		    	 OR (@SEARCH_FOR='GOAT' AND a.SPECIES_CODE ='1')
	    	  ) 
		 		with UR;
		 
		 -- Find matching animal id in error data
		 INSERT INTO SESSION.TmpIntIDChar12Lists
		 (
		 	
		    ANIM_KEY,
			INT_ID, 
			SEX_CODE,
			SPECIES_CODE,  
			ANIM_ID_NUM,
			ORDER
		 )
		  SELECT  
				NULL AS ANIM_KEY, 
				a.INT_ID,  
				'U' AS  SEX_CODE,
				a.SPECIES_CODE,
				t.INPUT_VALUE_12_CHAR AS ANIM_ID_NUM,
				t.ORDER
		FROM   
		(
		   select right(repeat('0',12)||upper(t.INPUT_VALUE),12) as INPUT_VALUE_12_CHAR,
		          t.INPUT_VALUE,
		          t.ORDER
		   from SESSION.TmpInputs t
		   where length(t.INPUT_VALUE)<=12
		)t
		JOIN ANIM_KEY_HAS_ERROR a 
			ON t.INPUT_VALUE_12_CHAR = right(a.INT_ID,12) 
			AND ((@SEARCH_FOR='CATTLE' AND a.SPECIES_CODE ='0')
			     OR (@SEARCH_FOR='GOAT' AND a.SPECIES_CODE ='1')
			   )
		LEFT JOIN 
		 		(SELECT DISTINCT ANIM_ID_NUM
				 FROM SESSION.TmpIntIDChar12Lists  
		 		)validAnimal 
		    ON t.INPUT_VALUE_12_CHAR = validAnimal.ANIM_ID_NUM 
		 
	    WHERE validAnimal.ANIM_ID_NUM IS NULL  
		with UR;
		 
		 
		 
		 INSERT INTO SESSION.TmpInputValid 
		 (
		 INPUT_VALUE
		 )
		 SELECT ANIM_ID_NUM
		 FROM SESSION.TmpIntIDChar12Lists a with UR;
  
	    -- Remove duplicate output, same animal ID but has different anim key
		
		MERGE INTO SESSION.TmpIntIDChar12Lists as A
		 using
		 ( 
			 SELECT INT_ID, MIN(ANIM_KEY) AS MIN_ANIM_KEY -- keep min animal_key
			 FROM SESSION.TmpIntIDChar12Lists t	
			 GROUP BY INT_ID with UR
		 )AS B
		 ON  A.INT_ID = B.INT_ID and A.ANIM_KEY <> B.MIN_ANIM_KEY
		 WHEN MATCHED THEN
		 DELETE
		 ;
		 
		 
	-- DS1: output list
     	BEGIN
		 	DECLARE cursor1 CURSOR WITH RETURN for
		 		
		 	SELECT  
				a.ANIM_ID_NUM,
				a.INT_ID AS ANIMAL_ID,
				a.ANIM_KEY,
				a.SPECIES_CODE,
				a.SEX_CODE,
		 		case when  aHasErr.INT_ID is not null then '1'
		      		else '0' 
		    	end as HAS_ERROR,
				case when  a.ANIM_KEY is not null then '1'
			      	else '0' 
				end as IS_LINK_TO_ANIMAL, 
				row_number()over(order by a.ORDER )  as ORDER
		 	FROM SESSION.TmpIntIDChar12Lists a
		 	LEFT JOIN ANIM_KEY_HAS_ERROR aHasErr 
		     	ON aHasErr.INT_ID = a.INT_ID 
		     	AND aHasErr.SPECIES_CODE = a.SPECIES_CODE 
		     
			ORDER BY ORDER with UR;
		  
		 	OPEN cursor1;
		 	 
	   END; 
	   
	  	-- DS2: invalid list
     	BEGIN
		 	DECLARE cursor1_1 CURSOR WITH RETURN for
		 		
		 	SELECT DISTINCT i.INPUT_VALUE
		 	FROM SESSION.TmpInputs i
		 	LEFT JOIN SESSION.TmpInputValid valid
		 		ON right(repeat('0',12)||upper(i.INPUT_VALUE),12) = valid.INPUT_VALUE
		 	WHERE valid.INPUT_VALUE IS NULL
		 		AND i.INPUT_VALUE <> '' with UR;
		 		OPEN cursor1_1;
		 	 
	   END;
	    
END