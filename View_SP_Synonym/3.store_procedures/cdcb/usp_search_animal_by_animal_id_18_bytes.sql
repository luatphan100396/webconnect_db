CREATE OR REPLACE PROCEDURE usp_Search_Animal_By_Animal_ID_18_Bytes 
--=================================================================================================
--Author: Nghi Ta
--Created Date: 2020-05-12
--Description: Get list INT_ID from animal id and sex code
--Output:
--        +Ds1: Table with animal id, animal key, species code, sex code, herd code, ctrl num, has error, 
--              is linked to animal 
--        +Ds2: Animal which has no information returned 
--=================================================================================================
(
	 IN @SEARCH_FOR VARCHAR(10) -- GOAT/CATTLE
	,IN @INPUT_VALUE VARCHAR(10000) 
	,IN @DELIMITER VARCHAR(1) default ','
)
	DYNAMIC RESULT SETS 3
	LANGUAGE SQL
BEGIN
	    
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputs
	(	
		INPUT_VALUE VARCHAR(128),
		ORDER INT  GENERATED BY DEFAULT AS IDENTITY 
      (START WITH 1 INCREMENT BY 1)
	
	)WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	 
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputsParseToIntID
	(	
		INT_ID CHAR(17),
		SEX_CODE CHAR(1),
		INPUT_VALUE VARCHAR(128),
		ORDER INT
      
	)WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpIntIDChar17Lists   
	(
		ANIM_KEY INT,
		INT_ID CHAR(17), 
		SEX_CODE char(1),
		SPECIES_CODE char(1), 
		INT_ID_18 char(18),
		ORDER INT
	) WITH REPLACE  ON COMMIT PRESERVE ROWS;
  
     
	   DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputValid 
	(
		INPUT_VALUE varchar(128) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	
	INSERT INTO SESSION.TmpInputs(INPUT_VALUE)
	SELECT  ITEM FROM table(fn_Split_String (@INPUT_VALUE,@DELIMITER));
	
	-- Remove duplicate input
	MERGE INTO SESSION.TmpInputs as A
	 using
	 (
  
		 SELECT INPUT_VALUE, MIN(ORDER) AS MIN_ORDER
		 FROM SESSION.TmpInputs t	
		 GROUP BY INPUT_VALUE
		 with UR
	 )AS B
	 ON  A.INPUT_VALUE = B.INPUT_VALUE and A.ORDER <> B.MIN_ORDER 
	 WHEN MATCHED THEN
	 DELETE
	 ;
	  
	   
	
	INSERT INTO SESSION.TmpInputsParseToIntID
	(
	   INT_ID,
	   SEX_CODE,
	   INPUT_VALUE,
	   ORDER
	)
	SELECT 
	       upper(substring(t.INPUT_VALUE,1,5)|| substring(t.INPUT_VALUE,7,12)) as INT_ID, 
		   upper(substring(t.INPUT_VALUE,6,1)) AS SEX_CODE,
		   t.INPUT_VALUE,
		   ORDER
	FROM
	(
	   SELECT *
	   FROM  SESSION.TmpInputs t 
	   WHERE LENGTH(INPUT_VALUE) =18
	)t 
	
	  ;
		 
	  
	     -- Find matching animal id in id_xref_table
		INSERT INTO SESSION.TmpIntIDChar17Lists
		(
			ANIM_KEY,
			INT_ID, 
			SEX_CODE,
			SPECIES_CODE,  
			INT_ID_18,
			ORDER
		)
		  
		 SELECT 
		 a.ANIM_KEY, 
		 a.INT_ID,  
		 a.SEX_CODE,
		 a.SPECIES_CODE,
		 t.INPUT_VALUE as INT_ID_18,
		 t.ORDER
		 FROM SESSION.TmpInputsParseToIntID t  
		 INNER JOIN ID_XREF_TABLE a
		 	 ON t.INT_ID  =  a.INT_ID 
		 	 and t.SEX_CODE  =  a.SEX_CODE  
		 WHERE ( (@SEARCH_FOR='CATTLE' AND a.SPECIES_CODE ='0') 
		          OR (@SEARCH_FOR='GOAT' AND a.SPECIES_CODE ='1')
		        )
		 with UR;
		 
		 -- Find matching animal id in error data
		 -- Find matching animal id in error data
		 INSERT INTO SESSION.TmpIntIDChar17Lists
		 (
		    ANIM_KEY,
			INT_ID, 
			SEX_CODE,
			SPECIES_CODE,  
			INT_ID_18,
			ORDER
		 )
		  SELECT 
		 NULL AS ANIM_KEY, 
		 a.INT_ID,  
		 'U' AS  SEX_CODE,
		 a.SPECIES_CODE,
		 t.INPUT_VALUE as INT_ID_18,
		 t.ORDER
		 FROM  SESSION.TmpInputsParseToIntID t
		 JOIN ANIM_KEY_HAS_ERROR a 
		     on t.INT_ID = a.INT_ID 
		     and t.SEX_CODE  =  a.SEX_CODE  
		 LEFT JOIN 
		 (SELECT DISTINCT INT_ID
		  FROM SESSION.TmpIntIDChar17Lists  
		 )validAnimal on a.INT_ID = validAnimal.INT_ID
		 WHERE validAnimal.INT_ID IS NULL 
		    and ( (@SEARCH_FOR='CATTLE' AND a.SPECIES_CODE ='0') 
		          OR (@SEARCH_FOR='GOAT' AND a.SPECIES_CODE ='1')
		        )
		  
		 with UR;
		 
		 INSERT INTO SESSION.TmpInputValid 
		 (
		 INPUT_VALUE
		 )
		 SELECT INT_ID_18
		 FROM SESSION.TmpIntIDChar17Lists a with UR;
  
	    -- Remove duplicate output, same animal ID but has different anim key
		
		MERGE INTO SESSION.TmpIntIDChar17Lists as A
		 using
		 ( 
			 SELECT INT_ID, MIN(ANIM_KEY) AS MIN_ANIM_KEY -- keep min animal_key
			 FROM SESSION.TmpIntIDChar17Lists t	
			 GROUP BY INT_ID with UR
		 )AS B
		 ON  A.INT_ID = B.INT_ID and A.ANIM_KEY <> B.MIN_ANIM_KEY
		 WHEN MATCHED THEN
		 DELETE
		 ;
		 
		 
	-- DS1: output list
     	begin
		 	DECLARE cursor1 CURSOR WITH RETURN for
		 		
		 	SELECT 
			a.INT_ID_18,  
			a.INT_ID AS ANIMAL_ID,
		 	a.ANIM_KEY,
		 	a.SPECIES_CODE,
		 	a.SEX_CODE,
		 	case when  aHasErr.INT_ID is not null then '1'
		      else '0' 
		    end as HAS_ERROR,
			case when  a.ANIM_KEY is not null then '1'
			      else '0' 
			end as IS_LINK_TO_ANIMAL, 
			row_number()over(order by a.ORDER )  as ORDER
		 	FROM SESSION.TmpIntIDChar17Lists a
		 	LEFT JOIN ANIM_KEY_HAS_ERROR aHasErr 
		     on aHasErr.INT_ID = a.INT_ID 
		     and aHasErr.SPECIES_CODE = a.SPECIES_CODE 
		     
			ORDER BY ORDER with UR;
		  
		 	OPEN cursor1;
		 	 
	   end; 
	   
	  	-- DS2: invalid list
     	begin
		 	DECLARE cursor1_1 CURSOR WITH RETURN for
		 		
		 	SELECT DISTINCT i.INPUT_VALUE
		 	FROM SESSION.TmpInputs i
		 	LEFT JOIN SESSION.TmpInputValid valid
		 	ON i.INPUT_VALUE = valid.INPUT_VALUE
		 	WHERE valid.INPUT_VALUE IS NULL
		 	AND i.INPUT_VALUE <> '' with UR;
		 	OPEN cursor1_1;
		 	 
	   end;
	    
	   
END
