CREATE OR REPLACE PROCEDURE rpt_Get_Eite_Cow_Heifer_Stats
--======================================================================================
--Author: Nghi Ta
--Created Date: 2020-06-29
--Description: get elite cow and heifer statistic
--Output: 
--       +Ds1: Breed, Mean trait PTA, STD DEV trait PTA 
--======================================================================================
( in @input_char varchar(10000),
  in @is_export smallint default 0,
  in @v_export_id varchar(128) )
 
 dynamic result sets  10
BEGIN
    
    DECLARE input_xml XML;
     
   DECLARE v_RUN_PDATE smallint;
   DECLARE DEFAULT_DATE char(10); 
   
   DECLARE sql_breed_code varchar(300);
   DECLARE sql_query_trait_code_1 varchar(10000); 
   DECLARE sql_query_trait_code_2 varchar(10000);  
   DECLARE sql_query_trait_code_3 varchar(10000);   
   DECLARE sql_query varchar(30000);  
   DECLARE sql_query_count varchar(30000);
   
   
   DECLARE sql_query_get_report_data varchar(30000);
   DECLARE sql_query_min_pctl varchar(30000); 
   DECLARE sql_query_get_nm_pctl2 varchar(30000); 
   DECLARE sql_query_get_report_data2 varchar(30000); 
   DECLARE sql_query_cut_data_seg varchar(30000);
   
   DECLARE sql_query_exp_header varchar(10000);  
   DECLARE sql_query_exp_header2 varchar(10000);  
   DECLARE sql_query_exp_content_1 varchar(30000);  
   DECLARE v_data clob(2M);  
   
   
    
   DECLARE EXPORT_PATH varchar(200);
   DECLARE EXPORT_FILE_NAME varchar(300); 
   DECLARE EXPORT_ID varchar(128);
     
   DECLARE C1 CURSOR WITH RETURN FOR D1;  
   DECLARE C2 CURSOR WITH RETURN FOR D2;  
  
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFilterInputsMultiSelect 
	(
		Field      VARCHAR(128),
		Value       VARCHAR(128),
		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.v_TmpTraitList
	(
		TRAIT  varchar(10), 
		TRAIT_CODE varchar(5),
		TRAIT_FULL_NAME varchar(50),
		UNIT varchar(30),
		DECIMAL_ADJUST varchar(5),
		TYPE varchar(30),
		ORDER  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.v_TmpBreedList
	(
		BREED_CODE  char(2) ,
		ORDER smallint
	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
	
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpReportData 
	(    BREED_NAME      VARCHAR(30)
		,BREED_CODE      VARCHAR(2)
		,NUM_ANIMAL int 
	    ,MEAN_SEG varchar(30000)
	    ,STDDEV_SEG varchar(30000)
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpReportData2 
	(    BREED_NAME      VARCHAR(30)
		,BREED_CODE      VARCHAR(2)
		,MIN_PCTL smallint 
	    ,MIN_NM_AMT int
	    ,ELITE_NUM int
	    ,HIGH_RANKING_NUM int
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	 
-- Retrive data	
 IF @is_export= 0 then
  
	set input_xml =  xmlparse(document @input_char);
	
	   
   INSERT INTO SESSION.TmpFilterInputsMultiSelect 
	(    
		Field,
		Value 
	)
   SELECT  
		 XML_BOOKS.Field,
		 XML_BOOKS.Value		 
		FROM  
		XMLTABLE(
		'$doc/Inputs/Multi_Item/Item' 
		PASSING input_xml AS "doc"
		COLUMNS 
		 
		Field      VARCHAR(128)  PATH 'Field',
		Value       VARCHAR(3000)  PATH 'Value' 
		) AS XML_BOOKS;    
		
   INSERT INTO SESSION.v_TmpBreedList(BREED_CODE, ORDER)
   SELECT upper(trim(VALUE)),ORDER
   FROM SESSION.TmpFilterInputsMultiSelect
   WHERE FIELD ='BREED_CODE';
    
   
   
   INSERT INTO SESSION.v_TmpTraitList
   (
   TRAIT,  
   TRAIT_CODE,
   TRAIT_FULL_NAME,
   UNIT,
   DECIMAL_ADJUST,
   TYPE 
   )
  
   SELECT REPLACE(REPLACE(upper(trim(t.VALUE)),'%','_PCT'),'$','_AMT') as TRAIT,
          trim(t.VALUE) as TRAIT_CODE, 
          trait.TRAIT_FULL_NAME AS TRAIT_FULL_NAME,
          trait.UNIT,
          DECIMAL_ADJUST,
          t.FIELD
          
   FROM 
   ( 
   SELECT VALUE, ORDER, FIELD
   FROM SESSION.TmpFilterInputsMultiSelect
   WHERE FIELD IN ('TRAIT','INDEX')
   )t
   LEFT JOIN 
   (
      select  TRAIT, 
		      TRAIT_FULL_NAME, 
		      UNIT, 
		      DECIMAL_ADJUST
      from table(fn_Get_List_traits())
   )trait
   on trait.TRAIT = t.VALUE
   order by t.ORDER
   ; 


   SET DEFAULT_DATE = (select STRING_VALUE FROM dbo.constants where name ='Default_Date_Value' LIMIT 1 with UR);   
   SET v_RUN_PDATE = (SELECT MAX(RUN_PDATE) FROM TABLE (fn_Get_List_Run_Date()) );
 
   SET EXPORT_ID =   HEX(GENERATE_UNIQUE());
  
   
   --build dynamic index columns to select
   -- Breed list
   select  substr(xmlserialize(xmlagg(xmltext( ','''||BREED_CODE||''''
										 	 ) order by  t.Order) as VARCHAR(30000)),2)
		  
		 into sql_breed_code 
   from  SESSION.v_TmpBreedList t  ;
    
    -- Trait list 
   select substr(xmlserialize(xmlagg(xmltext (  ',float2char(avg(bv.PTA_'||t.trait||'_QTY),'||DECIMAL_ADJUST||') as MEAN_'||t.trait||', float2char(stddev(bv.PTA_'||t.trait||'_QTY),'||DECIMAL_ADJUST||') as STDDEV_'||t.trait||'
       ' 
	                                             ) order by t.ORDER ) as VARCHAR(30000)),1)
	      
	     ,substr(xmlserialize(xmlagg(xmltext (  '||cast(bv.MEAN_'||t.trait||' as char(10))' 
	                                             ) order by t.ORDER ) as VARCHAR(30000)),3)
	     ,substr(xmlserialize(xmlagg(xmltext (  '||cast(bv.STDDEV_'||t.trait||' as char(10)) ' 
	                                             ) order by t.ORDER ) as VARCHAR(30000)),3)
	     ,substr(xmlserialize(xmlagg(xmltext (  ',trim(substring(MEAN_SEG,'|| cast( ((t.Order-1)*10)+1 as varchar(10))||',10)) as MEAN_'||t.trait||',trim(substring(STDDEV_SEG,'|| cast( ((t.Order-1)*10)+1 as varchar(10))||',10)) as STDDEV_'||t.trait||' 
	     ' 
	                                             ) order by t.ORDER ) as VARCHAR(30000)),1)
   into sql_query_trait_code_1, sql_query_trait_code_2, sql_query_trait_code_3, sql_query_cut_data_seg
   from SESSION.v_TmpTraitList t ;
 
    
   -- Create query      
   
   SET sql_query = '
    select  bv.eval_breed_code
          ,count(1) as num_animal
          '||sql_query_trait_code_1||' 
 from  cow_evl_table bv
 where bv.eval_pdate = '||v_RUN_PDATE||'
       and bv.eval_breed_code in ('||sql_breed_code||') 
       and elite_status_code in (''E'',''H'') 
 group by bv.eval_breed_code
   ';
   
 
  set sql_query = replace(sql_query,'PTA_FAT_PCT_QTY','PTA_FAT_PCT');
  set sql_query = replace(sql_query,'PTA_PRO_PCT_QTY','PTA_PRO_PCT');
  set sql_query = replace(sql_query,'PTA_NM_AMT_QTY','NM_AMT');
  set sql_query = replace(sql_query,'PTA_FM_AMT_QTY','FM_AMT');
  set sql_query = replace(sql_query,'PTA_CM_AMT_QTY','CM_AMT');
  set sql_query = replace(sql_query,'PTA_GM_AMT_QTY','GM_AMT');  
  set sql_query = replace(sql_query,'PTA_PA_AMT_QTY','PA_AMT'); 
   
	
	set sql_query = ' 
	INSERT INTO SESSION.TmpReportData
	(    
		BREED_NAME,
		BREED_CODE,
		NUM_ANIMAL, 
		MEAN_SEG, 
		STDDEV_SEG
	) 
	  select breed.breed_name 
	        ,breed.breed_code
	        ,bv.num_animal
	        ,'||sql_query_trait_code_2||'
	        ,'||sql_query_trait_code_3||' 
	  from
	  (
		select breed_code, breed_name 
		from breed_table
		where breed_code in ('||sql_breed_code||')
	 )breed 
	 left join
	  (
	    '||sql_query||'
	  )bv
	  on breed.breed_code = bv.eval_breed_code 
   
	';
  
  -- Data for mean and std dev   
 set sql_query_get_report_data ='
 select  BREED_NAME
		,BREED_CODE
		,NUM_ANIMAL  
        '||sql_query_cut_data_seg||' 
 from SESSION.TmpReportData  
 ';
 
  
 
 -- Data for percentile and corresponding NM  
 set sql_query_min_pctl ='
     insert into SESSION.TmpReportData2 
     (
	     BREED_NAME,
	     BREED_CODE,
	     MIN_PCTL,
	     MIN_NM_AMT,
	     ELITE_NUM,
	     HIGH_RANKING_NUM
     )
     
     select breed.breed_name,
            bv.eval_breed_code,
            bv.min_pctl,
            bv.min_nm_amt,
            bv.Elite_Num,
            bv.High_Rank_Num
     from 
     (
		select breed_code, breed_name 
		from breed_table
		where breed_code in ('||sql_breed_code||')
	 )breed 
	 left join
	 (  select   eval_breed_code,
		          case when eval_breed_code in (''AY'',''BS'',''GU'') then ''98''
			          when eval_breed_code in (''HO'',''JE'') then ''99''
			          when eval_breed_code in (''WW'',''MS'') then ''97''
			      end as min_pctl , 
		          min(cast(nm_amt as float)) min_nm_amt, 
				  sum(case when elite_status_code = ''E'' then 1 else 0 end) as Elite_Num,
				  sum(case when elite_status_code = ''H'' then 1 else 0 end) as High_Rank_Num  
		 from  cow_evl_table
		 where eval_pdate = '||v_RUN_PDATE||' 
		      and eval_breed_code in ('||sql_breed_code||') 
		      and ( (eval_breed_code in (''AY'',''BS'',''GU'')  and  replace(nm_pctl,''++'',''100'')>=98)
			      or (eval_breed_code in (''HO'',''JE'')  and  replace(nm_pctl,''++'',''100'')>=99)
			      or (eval_breed_code in (''WW'',''MS'')  and  replace(nm_pctl,''++'',''100'')>=97) 
		      )
		 group by eval_breed_code
    )bv
   on bv.eval_breed_code = breed.breed_code
 ';
   
set sql_query_get_nm_pctl2 ='
select   BREED_NAME,
	     BREED_CODE,
	     MIN_PCTL,
	     MIN_NM_AMT,
	     ELITE_NUM,
	     HIGH_RANKING_NUM
from SESSION.TmpReportData2 
order by BREED_CODE
';
 -- PREPARE DATA FOR EXPORT
     -- Build header 
     select  CenterAlign('Breed',30)
           ||RightAlign('Cows (No.)',12)  
           ||substr(xmlserialize(xmlagg(xmltext (  CenterAlign(TRAIT_CODE,17)
	                                             )  ) as VARCHAR(20000)),1)
   into sql_query_exp_header
   from SESSION.v_TmpTraitList t ; 
   
   set sql_query_exp_header =   
'Elite Cow and Heifer Statistics ------ Eval date: '|| varchar_format(cast(DEFAULT_DATE as date)+ v_RUN_PDATE,'Month YYYY') ||'

Mean predicted transmitting abilities (PTAs) & Standard deviations of PTAs
  
'||
repeat('-',length(sql_query_exp_header))
||' 
'||sql_query_exp_header
||' 
'||(
select  cast('' as char(30))
           ||cast('' as char(12))
           ||substr(xmlserialize(xmlagg(xmltext ( RightAlign('Mean',7)||cast('' as char(3))||RightAlign('StdDev',7)
	                                             )  ) as VARCHAR(20000)),1)
  
   from SESSION.v_TmpTraitList t
)
||' 
'||repeat('-',length(sql_query_exp_header))
||'
' 
;
  
    set sql_query_exp_header2 =   
'

Percentiles and corresponding NM for a cow to be designated as elite for a high-ranking grade and numbers by breed
  
'||  CenterAlign('Breed',30) || RightAlign('Minimum percentile',30)|| RightAlign('Minimum NM$',30)|| RightAlign('Elite cows (no.)',30)|| RightAlign('High-ranking grade cows (no.)',30)||'
'
;
  
   
   select 'LeftAlignWithChar(bv.breed_name,30,''.'') || RightAlign(bv.num_animal,12) '||substr(xmlserialize(xmlagg(xmltext (  '||   RightAlign(MEAN_'||trait||',7)  || cast('''' as char(3)) || RightAlign(STDDEV_'||trait||',7)  '
	                                             )  ) as VARCHAR(20000)),1)
   into sql_query_exp_content_1
   from SESSION.v_TmpTraitList t ;
   
   
set sql_query_get_report_data2 = '
 
insert into EXPORT_DATA_HISTORICAL(ExportID, Data)
select '''||EXPORT_ID||''',  
  	 --Mean & stddev PTA
  	  (
  	  select
  	  '''||sql_query_exp_header||''' || 
  	  replace(substr(xmlserialize(xmlagg(xmltext (  
  	  
  	  '||sql_query_exp_content_1||'
	 
	 ||''
''
	                                            ) order by  bv.breed_code) as VARCHAR(30000)),1)
	  ,''&#xD;'','''')  
	  
	  from ( 
	         
	         '||sql_query_get_report_data||'  
            )bv 
       )
      ||
       
      -- Percentile NM     
	  (
  	  select
  	  '''||sql_query_exp_header2||''' || 
  	  replace(substr(xmlserialize(xmlagg(xmltext (  
  	  LeftAlignWithChar(bv.breed_name,30,''.'') || RightAlign(bv.MIN_PCTL,30) || RightAlign(bv.MIN_NM_AMT,30) || RightAlign(bv.ELITE_NUM,30) || RightAlign(bv.HIGH_RANKING_NUM,30) 
  	  
	 
	 ||''
''
	                                            ) order by  bv.breed_code) as VARCHAR(30000)),1)
	  ,''&#xD;'','''')  
	  
	  from SESSION.TmpReportData2 bv
       )
        
     from sysibm.sysdummy1
	';    

  
        EXECUTE IMMEDIATE sql_query; 
        EXECUTE IMMEDIATE sql_query_min_pctl;
        EXECUTE IMMEDIATE sql_query_get_report_data2;	
      
      
      
      PREPARE D1 FROM  sql_query_get_report_data;
      OPEN C1;
      PREPARE D2 FROM  sql_query_get_nm_pctl2;
      OPEN C2;
      
   	  
      begin
   		        declare cir cursor with return for
   		        select EXPORT_ID  from sysibm.sysdummy1;
   		        open cir;
   	  end;
   	      
  	     
  ELSE 
	--@is_export
	
	  set v_data = ( select Data from EXPORT_DATA_HISTORICAL where ExportID = @v_export_id);
      set EXPORT_PATH = (select string_value from dbo.constants where name ='Export_Folder');
		 
	  set EXPORT_FILE_NAME =   'EliteCowHeiferStats_'  ||(select varchar_format(current date,'YYYYMMDD') || replace(cast(current time as varchar(10)),':','') from sysibm.sysdummy1); 
	  set EXPORT_FILE_NAME =  EXPORT_PATH||'/'||EXPORT_FILE_NAME||'.txt';
        
      call usp_common_export_long_text(v_data, EXPORT_FILE_NAME);
       
          -- Retrieve data 
      
        begin
  		        declare cir cursor with return for
  		        select EXPORT_FILE_NAME  from sysibm.sysdummy1;
  		        open cir;
  	     end;
  	       
   END IF;
END