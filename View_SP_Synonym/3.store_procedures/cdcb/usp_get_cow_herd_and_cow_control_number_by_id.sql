CREATE OR REPLACE PROCEDURE usp_Get_Cow_Herd_And_Cow_Control_Numbers_By_ID
--=================================================================================================
--Author: Linh Pham
--Created Date: 2020-01-19
--Description: Get list herd, control id from string input
--Output:
--        +Ds1: Table with animal id,  herd code, ctrl num
--        +Ds2: Invalid item 
--=================================================================================================
(
	IN @INPUT_VALUE VARCHAR(10000) 
	,IN @DELIMITER VARCHAR(1)
	,IN @IS_DATA_EXCHANGE char(1)
	,IN @REQUEST_KEY BIGINT
	,IN @OPERATION_KEY BIGINT
)
	DYNAMIC RESULT SETS 3
	LANGUAGE SQL
BEGIN
	DECLARE EXPORT_FILE_NAME VARCHAR(300);
	DECLARE TEMPLATE_NAME VARCHAR(200) ; 
	DECLARE LAST_ROW_ID INT;    
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputs
	(	
		INPUT_VALUE VARCHAR(128),
		ROW_KEY INT  GENERATED BY DEFAULT AS IDENTITY 
      (START WITH 1 INCREMENT BY 1)
	
	)WITH REPLACE ON COMMIT PRESERVE ROWS;
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_RESULT
	(
		INT_ID CHAR(17), 
		HERD_CODE int,
		CTRL_NUM int,	
		ROW_ID INT GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1),
		INPUT_VALUE varchar(1000)
	
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputValid 
	(
		INPUT_VALUE varchar(128) 
	)  WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	IF @IS_DATA_EXCHANGE ='0' THEN
	
		INSERT INTO SESSION.TmpInputs
		(
			INPUT_VALUE
		)
		SELECT  ITEM FROM table(fn_Split_String (@INPUT_VALUE,@DELIMITER));
		-- Remove duplicate input
	MERGE INTO SESSION.TmpInputs as A
	 using
	 (
  
		 SELECT INPUT_VALUE, MIN(ROW_KEY) AS MIN_ROW_KEY
		 FROM SESSION.TmpInputs t	
		 GROUP BY INPUT_VALUE
		 with UR
	 )AS B
	 ON  A.INPUT_VALUE = B.INPUT_VALUE 
	 and A.ROW_KEY <> B.MIN_ROW_KEY
	 WHEN MATCHED THEN
	 DELETE
	 ;
   ELSEIF @IS_DATA_EXCHANGE ='1' THEN
	
		INSERT INTO SESSION.TmpInputs
		(  
		   INPUT_VALUE
	   )
	  SELECT 
			dx.LINE
	   FROM
	   (
	      select 
	          	LINE 
		   from DATA_EXCHANGE_INPUT_TABLE  
		   where REQUEST_KEY = @REQUEST_KEY
	   )dx
	   INNER JOIN ANIM_KEY_HERD_CTRL_NUM id
	   		ON id.INT_ID = dx.LINE
	   		AND id.SPECIES_CODE ='0' 
	   ; 
	  
   END IF;
	
	INSERT INTO SESSION.TMP_RESULT
	(
		INT_ID, 
		HERD_CODE,
		CTRL_NUM,
		INPUT_VALUE
	)
	SELECT  
			 anim.INT_ID,  
			 anim.HERD_CODE,
			 anim.CTRL_NUM,
			 t.INPUT_VALUE
		 FROM  SESSION.TmpInputs t
			JOIN ANIM_KEY_HERD_CTRL_NUM anim 
		     on t.INPUT_VALUE = anim.INT_ID
		 with UR; 
	INSERT INTO SESSION.TmpInputValid 
		 (
		 INPUT_VALUE
		 )
		 SELECT INT_ID
		 FROM SESSION.TMP_RESULT a with UR;	 
   
   IF @IS_DATA_EXCHANGE ='0' THEN
     	begin
		 	DECLARE cursor0 CURSOR WITH RETURN for
		 		
		 	SELECT  
				a.INT_ID AS ANIMAL_ID,
			 	a.HERD_CODE,
			 	a.CTRL_NUM,
			 	case when  aHasErr.INT_ID is not null then '1'
		      	else '0' 
		    	end as HAS_ERROR,
				a.ROW_ID
		 	FROM  SESSION.TMP_RESULT a
		 	LEFT JOIN ANIM_KEY_HAS_ERROR aHasErr 
		     on aHasErr.INT_ID = a.INT_ID 
			ORDER BY a.ROW_ID,a.INT_ID
			 with UR;
		  
		 	OPEN cursor0;
		 	 
	   end; 
	   begin
		 	DECLARE cursor1_1 CURSOR WITH RETURN for
		 		
		 	SELECT DISTINCT i.INPUT_VALUE
		 	FROM SESSION.TmpInputs i
		 	LEFT JOIN SESSION.TmpInputValid valid
		 	ON i.INPUT_VALUE = valid.INPUT_VALUE
		 	WHERE valid.INPUT_VALUE IS NULL
		 	AND i.INPUT_VALUE <> '' with UR;
		 	OPEN cursor1_1;
		 	 
	   end;
	  ELSEIF @IS_DATA_EXCHANGE ='1' THEN
	
		   SET LAST_ROW_ID = (SELECT MAX(ROW_ID) FROM SESSION.TMP_RESULT); 
           SET TEMPLATE_NAME 	='HERD_COW_AND_CONTROL_NUMBER'; 
	       call usp_common_export_json_by_template('SESSION.TMP_RESULT',TEMPLATE_NAME,LAST_ROW_ID,EXPORT_FILE_NAME);
	       
	       --validate output
	       IF  EXPORT_FILE_NAME IS NULL THEN 
	 	     SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'Export failed'; 
		   END IF;
		   
		   UPDATE DATA_EXCHANGE_OPERATION_TABLE SET OUTPUT_PATH = EXPORT_FILE_NAME 
		   WHERE OPERATION_KEY = @OPERATION_KEY;
		   
	       
	       begin
	        declare c1 cursor with return for
	          select EXPORT_FILE_NAME from sysibm.sysdummy1;
       
              open c1;
    
            end;
            
            
            
	  
   END IF;
   
   
	    
END