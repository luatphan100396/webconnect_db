CREATE OR REPLACE PROCEDURE usp_Get_Cow_Herd_And_Cow_Control_Numbers_By_ID
--=================================================================================================
--Author: Linh Pham
--Created Date: 2020-01-19
--Description: Get list herd, control id from string input
--Output:
--        +Ds1: Table with animal id,  herd code, ctrl num
--        +Ds2: Invalid item 
--=================================================================================================
(
	IN @INT_ID char(17), 
	IN @ANIM_KEY INT, 
	IN @SPECIES_CODE char(1),
	IN @SEX_CODE char(1),
	IN @IS_DATA_EXCHANGE char(1),
	IN @REQUEST_KEY BIGINT,
	IN @OPERATION_KEY BIGINT
)
	DYNAMIC RESULT SETS 3
	LANGUAGE SQL
BEGIN
	DECLARE EXPORT_FILE_NAME VARCHAR(300);
	DECLARE TEMPLATE_NAME VARCHAR(200) ; 
	DECLARE LAST_ROW_ID INT;    

	DECLARE SQLCODE INTEGER DEFAULT 0; 
    DECLARE retcode_Operation INTEGER DEFAULT 0;
    DECLARE err_message varchar(300);

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_INPUT
		(
			ROW_KEY INT GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1),  
			INT_ID CHAR(17),
			ANIM_KEY INT,
			SPECIES_CODE CHAR(1),
			SEX_CODE CHAR(1),
			INPUT varchar(128)
		)WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_RESULT
	(
		ANIM_KEY INT,
		INT_ID CHAR(17), 
		SEX_CODE char(1),
		SPECIES_CODE char(1),
		HERD_CODE int,
		CTRL_NUM int,	
		ROW_ID INT GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1),
		INPUT varchar(128)
	
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	IF @IS_DATA_EXCHANGE ='0' THEN
		INSERT INTO SESSION.TMP_INPUT
		(
			INT_ID,
			ANIM_KEY,
			SPECIES_CODE,
			SEX_CODE
		)
		VALUES
		(
			@INT_ID,
			@ANIM_KEY,
			@SPECIES_CODE,
			@SEX_CODE
		);
   ELSEIF @IS_DATA_EXCHANGE ='1' THEN
	
		INSERT INTO SESSION.TMP_INPUT
		(  
		   INT_ID,
		   ANIM_KEY,
		   SPECIES_CODE,
		   SEX_CODE,
		   INPUT
	   )
	  SELECT 
	  		id.INT_ID,
			id.ANIM_KEY,
			id.SPECIES_CODE,
			id.SEX_CODE,
			dx.LINE
	   FROM
	   (
	      select 
	      		ROW_KEY, 
	          	LINE 
		   from DATA_EXCHANGE_INPUT_TABLE  
		   where REQUEST_KEY = @REQUEST_KEY
	   )dx
	   INNER JOIN ID_XREF_TABLE id
	   		ON id.INT_ID = dx.LINE
	   		AND id.SPECIES_CODE ='0' 
	   ORDER BY ROW_KEY
	   ; 
	  
   END IF;
	
	INSERT INTO SESSION.TMP_RESULT
	(
	    	ANIM_KEY,
			INT_ID, 
			SEX_CODE,
			SPECIES_CODE, 
			HERD_CODE,
			CTRL_NUM,
			INPUT
	)
	SELECT 
			 anim.ANIM_KEY, 
			 t.INT_ID,  
			 anim.SEX_CODE,
			 anim.SPECIES_CODE, 
			 anim.HERD_CODE,
			 anim.CTRL_NUM,
			 t.INPUT 
		 FROM  SESSION.TMP_INPUT t
			JOIN ANIM_KEY_HERD_CTRL_NUM anim 
		     on t.INT_ID = anim.INT_ID
		 with UR; 
    IF @IS_DATA_EXCHANGE ='0' THEN
     	begin
		 	DECLARE cursor0 CURSOR WITH RETURN for
		 		
				SELECT  
					INT_ID AS ANIMAL_ID,
					HERD_CODE,
					CTRL_NUM
				FROM  SESSION.TMP_RESULT 
				ORDER BY INT_ID
				with UR;
			
				OPEN cursor0;
	   end; 
	ELSEIF @IS_DATA_EXCHANGE ='1' THEN
	
		   SET LAST_ROW_ID = (SELECT MAX(ROW_ID) FROM SESSION.TMP_RESULT); 
           SET TEMPLATE_NAME 	='HERD_COW_AND_CONTROL_NUMBER'; 
	       begin
			     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			     SET retcode_Operation = SQLCODE;
			        
		         call usp_common_export_json_by_template('SESSION.TMP_RESULT',TEMPLATE_NAME,LAST_ROW_ID,EXPORT_FILE_NAME);
		     
		     end;
	       --validate output
	       IF  EXPORT_FILE_NAME IS NULL THEN 
	 	     SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'Export failed'; 
	END IF;
		   
		   UPDATE DATA_EXCHANGE_OPERATION_TABLE SET OUTPUT_PATH = EXPORT_FILE_NAME 
		   WHERE OPERATION_KEY = @OPERATION_KEY;
		   
	       
	       begin
	        declare c1 cursor with return for
	          	select EXPORT_FILE_NAME from sysibm.sysdummy1;
       
              	open c1;
    
            end;
   END IF;
    
END