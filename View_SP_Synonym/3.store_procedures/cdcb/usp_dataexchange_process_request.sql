CREATE OR REPLACE PROCEDURE usp_DataExchange_Process_Request
--======================================================
--Author: Nghi Ta
--Created Date: 2020-12-14
--Description: process data exchange request
--birth date, cross reference...
--Output: 
--        +Ds Animal information: INT ID, name, birth date, sex, MBC, REG, SRC...
--======================================================
(    
	IN @REQUEST_KEY BIGINT
)
	DYNAMIC RESULT SETS 10
P1: BEGIN
 
    DECLARE v_REQUES_DETAIL VARCHAR(3000);
    DECLARE v_INPUT_PATH VARCHAR(3000);
    DECLARE input_xml XML; 
    
    DECLARE v_OPERATION_KEY BIGINT;
    DECLARE v_OPERATION_NAME VARCHAR(300);
    
 	
 	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFilterinputsMultiSelect 
	(
		Field      VARCHAR(128),
		Value       VARCHAR(128),
		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpQUERY
	(
		ROW_ID  smallint,
		QUERY_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	 
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpOperationKey
	(
		OPERATION_KEY  BIGINT,
		OPERATION_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	
	-- VALIDATE INPUT
	
	IF (select count(1) from DATA_EXCHANGE_REQUEST_TABLE where REQUEST_KEY = @REQUEST_KEY and STATUS <>'NEW') >0 THEN
	    SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'The request has already processed or under processing';
	END IF;
	
	IF (select count(1) from DATA_EXCHANGE_OPERATION_TABLE where REQUEST_KEY = @REQUEST_KEY and STATUS <>'NEW') >0 THEN
	    SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'The request has already processed or under processing';
	END IF;
	 
	 -- START PROCESS
	 
	UPDATE DATA_EXCHANGE_REQUEST_TABLE SET STATUS = 'PROCESSING', START_TIME = current timestamp
	WHERE REQUEST_KEY = @REQUEST_KEY;
	 
	SET v_REQUES_DETAIL = (SELECT REQUEST_DETAIL FROM DATA_EXCHANGE_REQUEST_TABLE WHERE REQUEST_KEY = @REQUEST_KEY);
	
	--- RETRIEVE INPUT
	SET input_xml =  xmlparse(document v_REQUES_DETAIL);
 
   
			
	INSERT INTO SESSION.TmpFilterinputsMultiSelect 
		(    
			Field,
			Value
		)
	SELECT  
			 nullif(trim(XML_BOOKS.Field),'') as Field,
			 nullif(trim(XML_BOOKS.Value),'') as Value 
	FROM  
		XMLTABLE(
			'$doc/inputs/multi_item/item' 
			PASSING input_xml AS "doc"
			COLUMNS 
			 
			Field      VARCHAR(128)  PATH 'field',
			Value       VARCHAR(1000)  PATH 'value' 
			) AS XML_BOOKS;
			
	 
	INSERT INTO SESSION.TmpQUERY
	(
		ROW_ID,
		QUERY_NAME
	)
	SELECT Order, 
	       Value
	FROM SESSION.TmpFilterinputsMultiSelect 
	WHERE Field ='QUERY'
	;
	
	 
		 BEGIN   
		 
		             DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
		             
			         SET v_INPUT_PATH = (SELECT INPUT_PATH FROM DATA_EXCHANGE_REQUEST_TABLE WHERE REQUEST_KEY = @REQUEST_KEY);
					
					-- Import input into input table
					CALL SYSPROC.ADMIN_CMD( 'IMPORT FROM "'||v_INPUT_PATH||'" OF DEL method P(1) REPLACE INTO TMP_DATA_EXCHANGE_INPUT_TABLE(LINE)' );
			
					INSERT INTO DATA_EXCHANGE_INPUT_TABLE(ROW_KEY, REQUEST_KEY, LINE) 
					SELECT ROW_KEY, v_REQUEST_KEY, LINE
					FROM DATA_EXCHANGE_INPUT_TABLE;
					
					
					-- Create operation task
					
					 INSERT INTO DATA_EXCHANGE_OPERATION_TABLE
					(
					 
						 REQUEST_KEY,
						 OPERATION_NAME,
						 OUTPUT_PATH,
						 STATUS, 
						 CREATED_TIME,
						 START_TIME,
						 END_TIME 
					 )
					
				    SELECT 
				       @REQUEST_KEY,
				       QUERY_NAME,
				       NULL AS OUTPUT_PATH,
				       'NEW' AS STATUS,
				       current timestamp as CREATED_TIME,
				       null as START_TIME,
					   null AS END_TIME
					           
				    FROM SESSION.TmpQUERY
				    order by ROW_ID;
				    
				    
					
					-- Process each operation
					
						 
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpOperationKey
	(
		OPERATION_KEY  BIGINT,
		OPERATION_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	 INSERT INTO SESSION.TmpOperationKey
	 SELECT OPERATION_KEY, OPERATION_NAME
	 FROM  DATA_EXCHANGE_OPERATION_TABLE
	 WHERE REQUEST_KEY = @REQUEST_KEY
			 AND STATUS ='NEW';
			 
	 WHILE (SELECT COUNT(1) FROM SESSION.TmpOperationKey)>0 DO 
	 
	   
	   call usp_DataExchange_Process_Operation();
	 
	 END WHILE;
			 
			  
					
					
	
		    
		    END;
				 
		  	     IF retcode < 0 THEN 
					ROLLBACK  ;  
					
					 SET err_message = (SELECT SYSPROC.SQLERRM (cast(retcode as varchar(20))) FROM SYSIBM.SYSDUMMY1); 
					 SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = err_message;
					 
				 ELSE 
					COMMIT ; 
					 
						BEGIN
							DECLARE cursor1 CURSOR WITH RETURN for
							SELECT  1 AS RESULT 
							FROM sysibm.sysdummy1;
						 
							OPEN cursor1;
						END;
							 
				 END IF ;  
	 


 
    
--    DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInput 
--	(
--		INPUT      VARCHAR(128) 
--	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
-- 
-- 
--   DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputAnimals 
--	(
--		ANIMAL_ID      VARCHAR(128),
--		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
--	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
-- 
-- 
--CALL SYSPROC.ADMIN_CMD( 'IMPORT FROM "'||@file_path||'" OF DEL INSERT INTO TmpInput' );

begin
     declare c1 cursor with return for
       select 1 AS RESULT FROM sysibm.sysdummy1;
     
     open c1;
end;
 	  		 			
  
END P1CREATE OR REPLACE PROCEDURE usp_DataExchange_Process_Request
--======================================================
--Author: Nghi Ta
--Created Date: 2020-12-14
--Description: process data exchange request
--birth date, cross reference...
--Output: 
--        +Ds Animal information: INT ID, name, birth date, sex, MBC, REG, SRC...
--======================================================
(    
	IN @REQUEST_KEY BIGINT
)
	DYNAMIC RESULT SETS 10
P1: BEGIN
 
    DECLARE v_REQUES_DETAIL VARCHAR(3000);
    DECLARE v_INPUT_PATH VARCHAR(3000);
    DECLARE input_xml XML; 
    
    DECLARE v_OPERATION_KEY BIGINT;
    DECLARE v_OPERATION_NAME VARCHAR(300);
    
 	
 	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFilterinputsMultiSelect 
	(
		Field      VARCHAR(128),
		Value       VARCHAR(128),
		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpQUERY
	(
		ROW_ID  smallint,
		QUERY_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	 
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpOperationKey
	(
		OPERATION_KEY  BIGINT,
		OPERATION_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	
	-- VALIDATE INPUT
	
	IF (select count(1) from DATA_EXCHANGE_REQUEST_TABLE where REQUEST_KEY = @REQUEST_KEY and STATUS <>'NEW') >0 THEN
	    SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'The request has already processed or under processing';
	END IF;
	
	IF (select count(1) from DATA_EXCHANGE_OPERATION_TABLE where REQUEST_KEY = @REQUEST_KEY and STATUS <>'NEW') >0 THEN
	    SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'The request has already processed or under processing';
	END IF;
	 
	 -- START PROCESS
	 
	UPDATE DATA_EXCHANGE_REQUEST_TABLE SET STATUS = 'PROCESSING', START_TIME = current timestamp
	WHERE REQUEST_KEY = @REQUEST_KEY;
	 
	SET v_REQUES_DETAIL = (SELECT REQUEST_DETAIL FROM DATA_EXCHANGE_REQUEST_TABLE WHERE REQUEST_KEY = @REQUEST_KEY);
	
	--- RETRIEVE INPUT
	SET input_xml =  xmlparse(document v_REQUES_DETAIL);
 
   
			
	INSERT INTO SESSION.TmpFilterinputsMultiSelect 
		(    
			Field,
			Value
		)
	SELECT  
			 nullif(trim(XML_BOOKS.Field),'') as Field,
			 nullif(trim(XML_BOOKS.Value),'') as Value 
	FROM  
		XMLTABLE(
			'$doc/inputs/multi_item/item' 
			PASSING input_xml AS "doc"
			COLUMNS 
			 
			Field      VARCHAR(128)  PATH 'field',
			Value       VARCHAR(1000)  PATH 'value' 
			) AS XML_BOOKS;
			
	 
	INSERT INTO SESSION.TmpQUERY
	(
		ROW_ID,
		QUERY_NAME
	)
	SELECT Order, 
	       Value
	FROM SESSION.TmpFilterinputsMultiSelect 
	WHERE Field ='QUERY'
	;
	
	 
		 BEGIN   
		 
		             DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
		             
			         SET v_INPUT_PATH = (SELECT INPUT_PATH FROM DATA_EXCHANGE_REQUEST_TABLE WHERE REQUEST_KEY = @REQUEST_KEY);
					
					-- Import input into input table
					CALL SYSPROC.ADMIN_CMD( 'IMPORT FROM "'||v_INPUT_PATH||'" OF DEL method P(1) REPLACE INTO TMP_DATA_EXCHANGE_INPUT_TABLE(LINE)' );
			
					INSERT INTO DATA_EXCHANGE_INPUT_TABLE(ROW_KEY, REQUEST_KEY, LINE) 
					SELECT ROW_KEY, v_REQUEST_KEY, LINE
					FROM DATA_EXCHANGE_INPUT_TABLE;
					
					
					-- Create operation task
					
					 INSERT INTO DATA_EXCHANGE_OPERATION_TABLE
					(
					 
						 REQUEST_KEY,
						 OPERATION_NAME,
						 OUTPUT_PATH,
						 STATUS, 
						 CREATED_TIME,
						 START_TIME,
						 END_TIME 
					 )
					
				    SELECT 
				       @REQUEST_KEY,
				       QUERY_NAME,
				       NULL AS OUTPUT_PATH,
				       'NEW' AS STATUS,
				       current timestamp as CREATED_TIME,
				       null as START_TIME,
					   null AS END_TIME
					           
				    FROM SESSION.TmpQUERY
				    order by ROW_ID;
				    
				    
					
					-- Process each operation
					
						 
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpOperationKey
	(
		OPERATION_KEY  BIGINT,
		OPERATION_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	 INSERT INTO SESSION.TmpOperationKey
	 SELECT OPERATION_KEY, OPERATION_NAME
	 FROM  DATA_EXCHANGE_OPERATION_TABLE
	 WHERE REQUEST_KEY = @REQUEST_KEY
			 AND STATUS ='NEW';
			 
	 WHILE (SELECT COUNT(1) FROM SESSION.TmpOperationKey)>0 DO 
	 
	   
	   call usp_DataExchange_Process_Operation();
	 
	 END WHILE;
			 
			  
					
					
	
		    
		    END;
				 
		  	     IF retcode < 0 THEN 
					ROLLBACK  ;  
					
					 SET err_message = (SELECT SYSPROC.SQLERRM (cast(retcode as varchar(20))) FROM SYSIBM.SYSDUMMY1); 
					 SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = err_message;
					 
				 ELSE 
					COMMIT ; 
					 
						BEGIN
							DECLARE cursor1 CURSOR WITH RETURN for
							SELECT  1 AS RESULT 
							FROM sysibm.sysdummy1;
						 
							OPEN cursor1;
						END;
							 
				 END IF ;  
	 


 
    
--    DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInput 
--	(
--		INPUT      VARCHAR(128) 
--	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
-- 
-- 
--   DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputAnimals 
--	(
--		ANIMAL_ID      VARCHAR(128),
--		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
--	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
-- 
-- 
--CALL SYSPROC.ADMIN_CMD( 'IMPORT FROM "'||@file_path||'" OF DEL INSERT INTO TmpInput' );

begin
     declare c1 cursor with return for
       select 1 AS RESULT FROM sysibm.sysdummy1;
     
     open c1;
end;
 	  		 			
  
END P1CREATE OR REPLACE PROCEDURE usp_DataExchange_Process_Request
--======================================================
--Author: Nghi Ta
--Created Date: 2020-12-14
--Description: process data exchange request
--birth date, cross reference...
--Output: 
--        +Ds Animal information: INT ID, name, birth date, sex, MBC, REG, SRC...
--======================================================
(    
	IN @REQUEST_KEY BIGINT
)
	DYNAMIC RESULT SETS 10
P1: BEGIN
 
    DECLARE v_REQUES_DETAIL VARCHAR(3000);
    DECLARE v_INPUT_PATH VARCHAR(3000);
    DECLARE input_xml XML; 
    
    DECLARE v_OPERATION_KEY BIGINT;
    DECLARE v_OPERATION_NAME VARCHAR(300);
    
 	
 	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFilterinputsMultiSelect 
	(
		Field      VARCHAR(128),
		Value       VARCHAR(128),
		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpQUERY
	(
		ROW_ID  smallint,
		QUERY_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	 
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpOperationKey
	(
		OPERATION_KEY  BIGINT,
		OPERATION_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	
	-- VALIDATE INPUT
	
	IF (select count(1) from DATA_EXCHANGE_REQUEST_TABLE where REQUEST_KEY = @REQUEST_KEY and STATUS <>'NEW') >0 THEN
	    SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'The request has already processed or under processing';
	END IF;
	
	IF (select count(1) from DATA_EXCHANGE_OPERATION_TABLE where REQUEST_KEY = @REQUEST_KEY and STATUS <>'NEW') >0 THEN
	    SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'The request has already processed or under processing';
	END IF;
	 
	 -- START PROCESS
	 
	UPDATE DATA_EXCHANGE_REQUEST_TABLE SET STATUS = 'PROCESSING', START_TIME = current timestamp
	WHERE REQUEST_KEY = @REQUEST_KEY;
	 
	SET v_REQUES_DETAIL = (SELECT REQUEST_DETAIL FROM DATA_EXCHANGE_REQUEST_TABLE WHERE REQUEST_KEY = @REQUEST_KEY);
	
	--- RETRIEVE INPUT
	SET input_xml =  xmlparse(document v_REQUES_DETAIL);
 
   
			
	INSERT INTO SESSION.TmpFilterinputsMultiSelect 
		(    
			Field,
			Value
		)
	SELECT  
			 nullif(trim(XML_BOOKS.Field),'') as Field,
			 nullif(trim(XML_BOOKS.Value),'') as Value 
	FROM  
		XMLTABLE(
			'$doc/inputs/multi_item/item' 
			PASSING input_xml AS "doc"
			COLUMNS 
			 
			Field      VARCHAR(128)  PATH 'field',
			Value       VARCHAR(1000)  PATH 'value' 
			) AS XML_BOOKS;
			
	 
	INSERT INTO SESSION.TmpQUERY
	(
		ROW_ID,
		QUERY_NAME
	)
	SELECT Order, 
	       Value
	FROM SESSION.TmpFilterinputsMultiSelect 
	WHERE Field ='QUERY'
	;
	
	 
		 BEGIN   
		 
		             DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
		             
			         SET v_INPUT_PATH = (SELECT INPUT_PATH FROM DATA_EXCHANGE_REQUEST_TABLE WHERE REQUEST_KEY = @REQUEST_KEY);
					
					-- Import input into input table
					CALL SYSPROC.ADMIN_CMD( 'IMPORT FROM "'||v_INPUT_PATH||'" OF DEL method P(1) REPLACE INTO TMP_DATA_EXCHANGE_INPUT_TABLE(LINE)' );
			
					INSERT INTO DATA_EXCHANGE_INPUT_TABLE(ROW_KEY, REQUEST_KEY, LINE) 
					SELECT ROW_KEY, v_REQUEST_KEY, LINE
					FROM DATA_EXCHANGE_INPUT_TABLE;
					
					
					-- Create operation task
					
					 INSERT INTO DATA_EXCHANGE_OPERATION_TABLE
					(
					 
						 REQUEST_KEY,
						 OPERATION_NAME,
						 OUTPUT_PATH,
						 STATUS, 
						 CREATED_TIME,
						 START_TIME,
						 END_TIME 
					 )
					
				    SELECT 
				       @REQUEST_KEY,
				       QUERY_NAME,
				       NULL AS OUTPUT_PATH,
				       'NEW' AS STATUS,
				       current timestamp as CREATED_TIME,
				       null as START_TIME,
					   null AS END_TIME
					           
				    FROM SESSION.TmpQUERY
				    order by ROW_ID;
				    
				    
					
					-- Process each operation
					
						 
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpOperationKey
	(
		OPERATION_KEY  BIGINT,
		OPERATION_NAME VARCHAR(300) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	 
	 INSERT INTO SESSION.TmpOperationKey
	 SELECT OPERATION_KEY, OPERATION_NAME
	 FROM  DATA_EXCHANGE_OPERATION_TABLE
	 WHERE REQUEST_KEY = @REQUEST_KEY
			 AND STATUS ='NEW';
			 
	 WHILE (SELECT COUNT(1) FROM SESSION.TmpOperationKey)>0 DO 
	 
	   
	   call usp_DataExchange_Process_Operation();
	 
	 END WHILE;
			 
			  
					
					
	
		    
		    END;
				 
		  	     IF retcode < 0 THEN 
					ROLLBACK  ;  
					
					 SET err_message = (SELECT SYSPROC.SQLERRM (cast(retcode as varchar(20))) FROM SYSIBM.SYSDUMMY1); 
					 SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = err_message;
					 
				 ELSE 
					COMMIT ; 
					 
						BEGIN
							DECLARE cursor1 CURSOR WITH RETURN for
							SELECT  1 AS RESULT 
							FROM sysibm.sysdummy1;
						 
							OPEN cursor1;
						END;
							 
				 END IF ;  
	 


 
    
--    DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInput 
--	(
--		INPUT      VARCHAR(128) 
--	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
-- 
-- 
--   DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputAnimals 
--	(
--		ANIMAL_ID      VARCHAR(128),
--		Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
--	) WITH REPLACE ON COMMIT PRESERVE ROWS; 
-- 
-- 
--CALL SYSPROC.ADMIN_CMD( 'IMPORT FROM "'||@file_path||'" OF DEL INSERT INTO TmpInput' );

begin
     declare c1 cursor with return for
       select 1 AS RESULT FROM sysibm.sysdummy1;
     
     open c1;
end;
 	  		 			
  
END P1