CREATE OR REPLACE PROCEDURE usp_DataExchange_Process_Request
--======================================================
--Author: Nghi Ta
--Created Date: 2020-12-14
--Description: process data exchange request
--birth date, cross reference...
--Output: 
--        +Ds Animal information: INT ID, name, birth date, sex, MBC, REG, SRC...
--======================================================
(    
	IN @REQUEST_KEY BIGINT
)
	DYNAMIC RESULT SETS 10
P1: BEGIN
 
	    DECLARE v_REQUES_DETAIL VARCHAR(3000);
	    DECLARE v_INPUT_TYPE VARCHAR(50);
	    DECLARE v_INPUT VARCHAR(10000); 
	    DECLARE input_xml XML; 
	    
	    DECLARE v_OPERATION_KEY BIGINT;
	    DECLARE v_OPERATION_NAME VARCHAR(300);
	    
	    DECLARE SQLCODE INTEGER DEFAULT 0; 
	    DECLARE retcode INTEGER DEFAULT 0;
	    DECLARE err_message varchar(300); 
	 	
	 	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFilterinputsMultiSelect 
		(
			Field      VARCHAR(128),
			Value       VARCHAR(128),
			Order  smallint  GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 INCREMENT BY 1)  
		) WITH REPLACE ON COMMIT PRESERVE ROWS; 
		
		DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpQUERY
		(
			ROW_ID  smallint,
			QUERY_NAME VARCHAR(300) 
		) WITH REPLACE ON COMMIT PRESERVE ROWS;
		 
		 
		 DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpOperationKey
		(
			OPERATION_KEY  BIGINT,
			OPERATION_NAME VARCHAR(300) 
		) WITH REPLACE ON COMMIT PRESERVE ROWS;
		 
		
		 --VALIDATE INPUT
		
		IF (select count(1) from DATA_EXCHANGE_REQUEST_TABLE where REQUEST_KEY = @REQUEST_KEY ) = 0 THEN
		    SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'The request does not exist';
		END IF;
		
		IF (select count(1) from DATA_EXCHANGE_REQUEST_TABLE where REQUEST_KEY = @REQUEST_KEY and UPPER(STATUS) <>'NEW') >0 THEN
		    SIGNAL SQLSTATE '65000' SET MESSAGE_TEXT = 'The request has already processed or under processing';
		END IF; 
		
		SELECT REQUEST_DETAIL,
		       INPUT_TYPE,
		       INPUT 
		INTO v_REQUES_DETAIL,
		     v_INPUT_TYPE,
		     v_INPUT
		FROM DATA_EXCHANGE_REQUEST_TABLE 
		WHERE REQUEST_KEY = @REQUEST_KEY
		WITH UR;
		
		
		
		
		-- RETRIEVE INPUT
		SET input_xml =  xmlparse(document v_REQUES_DETAIL);
	 
	   
				
		INSERT INTO SESSION.TmpFilterinputsMultiSelect 
			(    
				Field,
				Value
			)
		SELECT  
				 nullif(trim(XML_BOOKS.Field),'') as Field,
				 nullif(trim(XML_BOOKS.Value),'') as Value 
		FROM  
			XMLTABLE(
				'$doc/inputs/multi_item/item' 
				PASSING input_xml AS "doc"
				COLUMNS 
				 
				Field      VARCHAR(128)  PATH 'field',
				Value       VARCHAR(1000)  PATH 'value' 
				) AS XML_BOOKS;
				
		 
		INSERT INTO SESSION.TmpQUERY
		(
			ROW_ID,
			QUERY_NAME
		)
		SELECT Order, 
		       Value
		FROM SESSION.TmpFilterinputsMultiSelect 
		WHERE Field ='QUERY'
		;
		 
         --START PROCESS 
         UPDATE DATA_EXCHANGE_REQUEST_TABLE SET STATUS = 'Processing', START_TIME = current timestamp
         WHERE REQUEST_KEY = @REQUEST_KEY;
          
        
        IF v_INPUT_TYPE = 'FILE' THEN  
	         
			 --Import input into input table
			CALL SYSPROC.ADMIN_CMD( 'IMPORT FROM "'||v_INPUT||'" OF DEL method P(1) REPLACE INTO TMP_DATA_EXCHANGE_INPUT_TABLE(LINE)' );
	
			INSERT INTO DATA_EXCHANGE_INPUT_TABLE(REQUEST_KEY, LINE) 
			SELECT @REQUEST_KEY, LINE
			FROM
			(
				SELECT  MIN(ROW_KEY) AS ROW_KEY, LINE
				FROM TMP_DATA_EXCHANGE_INPUT_TABLE
				GROUP BY  @REQUEST_KEY, LINE
			)t
			ORDER BY ROW_KEY;
		
		ELSEIF v_INPUT_TYPE = 'ID_LIST' THEN 
		    
		    INSERT INTO DATA_EXCHANGE_INPUT_TABLE( REQUEST_KEY, LINE) 
	        SELECT @REQUEST_KEY,  ITEM 
	        FROM table(fn_Split_String (v_INPUT,','));
		
		END IF;
		
		-- Create operation task
		
		 INSERT INTO DATA_EXCHANGE_OPERATION_TABLE
		(
		 
			 REQUEST_KEY,
			 OPERATION_NAME,
			 OUTPUT_PATH,
			 STATUS, 
			 CREATED_TIME,
			 START_TIME,
			 END_TIME 
		 )
		
	    SELECT 
	       @REQUEST_KEY,
	       QUERY_NAME,
	       NULL AS OUTPUT_PATH,
	       'New' AS STATUS,
	       current timestamp as CREATED_TIME,
	       null as START_TIME,
		   null AS END_TIME
		           
	    FROM SESSION.TmpQUERY
	    order by ROW_ID;
	    
	    commit;
			    
		 -- Process each operation
			  
		 INSERT INTO SESSION.TmpOperationKey
		 SELECT OPERATION_KEY, OPERATION_NAME
		 FROM  DATA_EXCHANGE_OPERATION_TABLE
		 WHERE REQUEST_KEY = @REQUEST_KEY
				 AND UPPER(STATUS) ='NEW';

	BEGIN   
			   
             DECLARE EXIT HANDLER FOR SQLEXCEPTION
             SET retcode = SQLCODE;
	             					 
			 WHILE (SELECT COUNT(1) FROM SESSION.TmpOperationKey)>0 DO  
			 
			    select OPERATION_KEY, OPERATION_NAME
			    into v_OPERATION_KEY, v_OPERATION_NAME
			    from SESSION.TmpOperationKey limit 1;
		    
			   
			   call usp_DataExchange_Process_Operation(v_OPERATION_KEY);
			   
			   
			   delete from SESSION.TmpOperationKey where OPERATION_KEY =v_OPERATION_KEY ;
			   
			   
			 
			 END WHILE;
			 
			 UPDATE DATA_EXCHANGE_REQUEST_TABLE SET STATUS = 'Completed', END_TIME = current timestamp
		     WHERE REQUEST_KEY = @REQUEST_KEY;
			  
		    
     END;
				 
  	IF retcode < 0 THEN 
			ROLLBACK  ;  
			
			 SET err_message = (SELECT SYSPROC.SQLERRM (cast(retcode as varchar(20))) FROM SYSIBM.SYSDUMMY1); 
			 
			 UPDATE DATA_EXCHANGE_REQUEST_TABLE SET STATUS = 'Failed', MESSAGE = err_message,  END_TIME = current timestamp
		     WHERE REQUEST_KEY = @REQUEST_KEY; 
			  
		 
	 ELSE 
	 
	    -- Clean up input data
	    
	     DELETE FROM DATA_EXCHANGE_INPUT_TABLE WHERE REQUEST_KEY = @REQUEST_KEY; 
		COMMIT ; 
		 
			BEGIN
				DECLARE cursor1 CURSOR WITH RETURN for
				SELECT  1 AS RESULT ,retcode
				FROM sysibm.sysdummy1;
			 
				OPEN cursor1;
			END;
				 
	 END IF ;   
 	  		 			
  
END