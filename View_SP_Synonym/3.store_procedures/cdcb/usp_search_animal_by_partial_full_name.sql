CREATE OR REPLACE PROCEDURE usp_Search_Animal_By_Partial_Full_Name
--================================================================================
--Author: Tuyen Nguyen
--Created Date: 2021-01-15
--Description: Get list full name from string input
--Output:
--        +Ds1: animal 17 chars, sex, anim_key, species_code,full name
--        +Ds2: invalid full name 
--=================================================================================
(
	IN @INPUT_VALUE VARCHAR(10000) 
	,@DELIMITER VARCHAR(1) default ','
)
	DYNAMIC RESULT SETS 3
	LANGUAGE SQL
BEGIN
	    
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputs
	(	
		INPUT_VALUE VARCHAR(128),
		ORDER INT  GENERATED BY DEFAULT AS IDENTITY 
      (START WITH 1 INCREMENT BY 1)
	
	)WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpFullNameLists   
	(   
	    ANIM_NAME VARCHAR(30),
		ANIM_KEY INT,
		INT_ID CHAR(17), 
		SEX_CODE char(1),
		SPECIES_CODE char(1), 
		ORDER INT
	) WITH REPLACE  ON COMMIT PRESERVE ROWS;
  
     
	   DECLARE GLOBAL TEMPORARY TABLE SESSION.TmpInputValid 
	(
		INPUT_VALUE varchar(128) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS;
	
	
	INSERT INTO SESSION.TmpInputs(INPUT_VALUE)
	SELECT  ITEM FROM table(fn_Split_String (@INPUT_VALUE,@DELIMITER));
	
	-- Remove duplicate input
	MERGE INTO SESSION.TmpInputs as A
	 using
	 (
  
		 SELECT INPUT_VALUE, MIN(ORDER) AS MIN_ORDER
		 FROM SESSION.TmpInputs t	
		 GROUP BY INPUT_VALUE
		 with UR
	 )AS B
	 ON  A.INPUT_VALUE = B.INPUT_VALUE and A.ORDER <> B.MIN_ORDER 
	 WHEN MATCHED THEN
	 DELETE
	 ;
	  
	     -- Find matching animal id in id_xref_table
		INSERT INTO SESSION.TmpFullNameLists
		(
		    ANIM_NAME,
			ANIM_KEY,
			INT_ID, 
			SEX_CODE,
			SPECIES_CODE,  
			ORDER
		)
		  
		 SELECT 
		 an.ANIM_NAME,
		 a.ANIM_KEY, 
		 a.INT_ID,  
		 a.SEX_CODE,
		 a.SPECIES_CODE,
		 t.ORDER
		 FROM  SESSION.TmpInputs t
		 INNER JOIN ANIM_NAME_TABLE an
		 on trim(upper(an.ANIM_NAME)) LIKE '%'||trim(upper(t.INPUT_VALUE))||'%'
		 
		 JOIN ID_XREF_TABLE a
		 ON an.INT_ID=a.INT_ID
		 AND a.SEX_CODE=an.SEX_CODE
		 AND a.SPECIES_CODE=an.SPECIES_CODE
		 ORDER BY ORDER
		 with UR;
		 		 
		 
		 INSERT INTO SESSION.TmpInputValid 
		 (
		 INPUT_VALUE
		 )
		 SELECT ANIM_NAME
		 FROM SESSION.TmpFullNameLists a with UR;
  
	    -- Remove duplicate output, same animal ID but has different anim key
		
		MERGE INTO SESSION.TmpFullNameLists as A
		 using
		 ( 
			 SELECT INT_ID, MIN(ANIM_KEY) AS MIN_ANIM_KEY -- keep min animal_key
			 FROM SESSION.TmpFullNameLists t	
			 GROUP BY INT_ID with UR
		 )AS B
		 ON  A.INT_ID = B.INT_ID and A.ANIM_KEY <> B.MIN_ANIM_KEY
		 WHEN MATCHED THEN
		 DELETE
		 ;
		 
		 
	-- DS1: output list
     	begin
		 	DECLARE cursor1 CURSOR WITH RETURN for
		 		
		 	SELECT  a.INT_ID AS ANIMAL_ID,
		 	a.ANIM_NAME,
		 	a.ANIM_KEY,
		 	a.SPECIES_CODE,
		 	a.SEX_CODE,
		 	0 as HAS_ERROR,
			case when  a.ANIM_KEY is not null then '1'
			      else '0' 
			end as IS_LINK_TO_ANIMAL, 
			row_number()over(order by a.ORDER )  as ORDER
		 	FROM SESSION.TmpFullNameLists a
		     
			ORDER BY ORDER with UR;
		  
		 	OPEN cursor1;
		 	 
	   end; 
	   
	  	-- DS2: invalid list
     	begin
		 	DECLARE cursor1_1 CURSOR WITH RETURN for
		 		
		 	SELECT DISTINCT i.INPUT_VALUE
		 	FROM SESSION.TmpInputs i
		 	LEFT JOIN SESSION.TmpInputValid valid
		 	ON i.INPUT_VALUE = valid.INPUT_VALUE
		 	WHERE valid.INPUT_VALUE IS NULL
		 	AND i.INPUT_VALUE <> '' with UR;
		 	OPEN cursor1_1;
		 	 
	   end;
	    
END 